<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JS继承的几种方法总结</title>
    <link href="/2022/07/25/hello-world/"/>
    <url>/2022/07/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>由于js不像java那样是真正面向对象的语言，js是基于对象的，它没有类的概念<br>所以，要想实现继承，可以用js的原型prototype机制或者用apply和call方法去实现。在面向对象的语言中，我们使用类来创建一个自定义对象。然而js中所有事物都是对象，那么用什么办法来创建自定义对象呢？<br>这就需要用到js的原型：我们可以简单的把prototype看做是一个模版，新创建的自定义对象都是这个模版（prototype）的一个拷贝 （实际上不是拷贝而是链接，只不过这种链接是不可见，新实例化的对象内部有一个看不见的Proto指针，指向原型对象）。</p><h3 id="1、继承第一种方式：对象冒充"><a href="#1、继承第一种方式：对象冒充" class="headerlink" title="1、继承第一种方式：对象冒充"></a>1、继承第一种方式：对象冒充</h3><figure class="highlight javascript"><figcaption><span>对象冒充</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javaScript">blog<span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span>(<span class="hljs-params">username</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">username</span> = username;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">hello</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">username</span>);<br>    &#125;<br>  &#125;<br><span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayMorning</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;good morning &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">username</span>);<br>&#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params">username,password</span>)&#123;<br>    <span class="hljs-comment">//通过以下3行实现将Parent的属性和方法追加到Child中，从而实现继承</span><br>    <span class="hljs-comment">//第一步：this.method是作为一个临时的属性，并且指向Parent所指向的对象，</span><br>    <span class="hljs-comment">//第二步：执行this.method方法，即执行Parent所指向的对象函数</span><br>    <span class="hljs-comment">//第三步：销毁this.method属性，即此时Child就已经拥有了Parent的所有属性和方法</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">method</span> = <span class="hljs-title class_">Parent</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">method</span>(username);<span class="hljs-comment">//最关键的一行</span><br>    <span class="hljs-keyword">delete</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">method</span>;<br><br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">password</span> = password;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">world</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">password</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">var</span> parent = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parent</span>(<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>  <span class="hljs-keyword">var</span> child = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&quot;lisi&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>);<br>  parent.<span class="hljs-title function_">hello</span>();<br>  parent.<span class="hljs-title function_">sayMorning</span>();<br>  child.<span class="hljs-title function_">hello</span>();<br>  child.<span class="hljs-title function_">world</span>();<br></code></pre></td></tr></table></figure><h3 id="2、继承第二种方式：call-方法方式"><a href="#2、继承第二种方式：call-方法方式" class="headerlink" title="2、继承第二种方式：call()方法方式"></a>2、继承第二种方式：call()方法方式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs call()方法方式">function Parent(username)&#123;<br>    this.username = username;<br>    this.hello = function()&#123;<br>      console.log(this.username);<br>    &#125;<br>  &#125;<br><br>Parent.prototype.sayMorning = function()&#123;<br>console.log(&#x27;good morning &#x27; + this.username);<br>&#125;<br><br>  function Child(username,password)&#123;<br>    Parent.call(this,username);<br><br>    this.password = password;<br>    this.world = function()&#123;<br>      console.log(this.password);<br>    &#125;<br>  &#125;<br><br><br>  var parent = new Parent(&quot;zhangsan&quot;);<br>  var child = new Child(&quot;lisi&quot;,&quot;123456&quot;);<br>  parent.hello();<br>  parent.sayMorning();<br>  child.hello();<br>  child.world();<br>// child.sayMorning();  通过prototype 添加的方法和属性，不能用来继承<br></code></pre></td></tr></table></figure><h3 id="3、继承的第三种方式：apply-方法方式"><a href="#3、继承的第三种方式：apply-方法方式" class="headerlink" title="3、继承的第三种方式：apply()方法方式"></a>3、继承的第三种方式：apply()方法方式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs apply()方法方式">function Parent(username)&#123;<br>    this.username = username;<br>    this.hello = function()&#123;<br>      console.log(this.username);<br>    &#125;<br>  &#125;<br><br>Parent.prototype.sayMorning = function()&#123;<br>console.log(&#x27;good morning &#x27; + this.username);<br>&#125;<br><br>  function Child(username,password)&#123;<br>    Parent.apply(this,new Array(username));<br><br>    this.password = password;<br>    this.world = function()&#123;<br>      console.log(this.password);<br>    &#125;<br>  &#125;<br>var parent = new Parent(&quot;zhangsan&quot;);<br>  var child = new Child(&quot;lisi&quot;,&quot;123456&quot;);<br>  parent.hello();<br>  parent.sayMorning();<br>  child.hello();<br>  child.world();<br>// child.sayMorning(); 通过prototype 添加的方法和属性，不能用来继承<br></code></pre></td></tr></table></figure><h3 id="4、继承的第四种方式：原型链方式，即子类通过prototype将所有在父类中通过prototype追加的属性和方法都追加到Child，从而实现了继承"><a href="#4、继承的第四种方式：原型链方式，即子类通过prototype将所有在父类中通过prototype追加的属性和方法都追加到Child，从而实现了继承" class="headerlink" title="4、继承的第四种方式：原型链方式，即子类通过prototype将所有在父类中通过prototype追加的属性和方法都追加到Child，从而实现了继承"></a>4、继承的第四种方式：原型链方式，即子类通过prototype将所有在父类中通过prototype追加的属性和方法都追加到Child，从而实现了继承</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs 原型链方式">function Person()&#123;<br>  &#125;<br>  Person.prototype.hello = &quot;hello&quot;;<br>  Person.prototype.sayHello = function()&#123;<br>    console.log(this.hello);<br>  &#125;<br><br>  function Child()&#123;<br>  &#125;<br>  Child.prototype = new Person();//这行的作用是：将Parent中将所有通过prototype追加的属性和方法都追加到Child，从而实现了继承<br>  Child.prototype.world = &quot;world&quot;;<br>  Child.prototype.sayWorld = function()&#123;<br>    console.log(this.world);<br>  &#125;<br><br>  var c = new Child();<br>  c.sayHello();<br>  c.sayWorld();<br>通过prototype 添加的方法和属性，不能用来继承<br></code></pre></td></tr></table></figure><h3 id="5、继承的第五种方式：混合方式-混合了call或者apply方式、原型链方式"><a href="#5、继承的第五种方式：混合方式-混合了call或者apply方式、原型链方式" class="headerlink" title="5、继承的第五种方式：混合方式, 混合了call或者apply方式、原型链方式"></a>5、继承的第五种方式：混合方式, 混合了call或者apply方式、原型链方式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs 混合方式">function Parent(hello)&#123;<br>    this.hello = hello;<br>  &#125;<br>  Parent.prototype.sayHello = function()&#123;<br>    console.log(this.hello);<br>  &#125;<br><br>  function Child(hello,world)&#123;<br>    Parent.call(this,hello);//将父类的属性继承过来<br>    this.world = world;//新增一些属性<br>  &#125;<br><br>  Child.prototype = new Parent();//将父类的方法继承过来<br><br>  Child.prototype.sayWorld = function()&#123;//新增一些方法<br>    console.log(this.world);<br>  &#125;<br><br>  var c = new Child(&quot;zhangsan&quot;,&quot;lisi&quot;);<br>  c.sayHello();<br>  c.sayWorld();<br>可以继承通过prototype 添加的方法和属性<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JS继承</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>es5&amp;es6 Array_test</title>
    <link href="/2021/07/15/array%20copy/"/>
    <url>/2021/07/15/array%20copy/</url>
    
    <content type="html"><![CDATA[<h2 id="es5-amp-amp-es6-x3D-gt-JS数组操作汇总"><a href="#es5-amp-amp-es6-x3D-gt-JS数组操作汇总" class="headerlink" title="es5&amp;&amp;es6 &#x3D;&gt; JS数组操作汇总"></a>es5&amp;&amp;es6 &#x3D;&gt; JS数组操作汇总</h2><ol><li>Array.map()</li></ol><p>此方法是将数组中的每个元素调用一个提供的函数，结果作为一个新的数组返回，并没有改变原来的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">let</span> newArr = arr.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x*<span class="hljs-number">2</span>)<br><span class="hljs-comment">//arr= [1, 2, 3, 4, 5]   原数组保持不变</span><br><span class="hljs-comment">//newArr = [2, 4, 6, 8, 10] 返回新数组</span><br></code></pre></td></tr></table></figure><ol start="2"><li>Array.forEach()</li></ol><p>此方法是将数组中的每个元素执行传进提供的函数，没有返回值，直接改变原数组，注意和map方法区分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>num.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x*<span class="hljs-number">2</span>)<br><span class="hljs-comment">// arr = [2, 4, 6, 8, 10]  数组改变,注意和map区分</span><br></code></pre></td></tr></table></figure><ol start="3"><li>Array.filter()</li></ol><p>此方法是将所有元素进行判断，将满足条件的元素作为一个新的数组返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">const</span> isBigEnough =&gt; <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> value &gt;= <span class="hljs-number">3</span><br><span class="hljs-keyword">let</span> newArr = arr.<span class="hljs-title function_">filter</span>(isBigEnough )<br><span class="hljs-comment">//newNum = [3, 4, 5] 满足条件的元素返回为一个新的数组</span><br></code></pre></td></tr></table></figure><ol start="4"><li>Array.every()</li></ol><p>此方法是将所有元素进行判断返回一个布尔值，如果所有元素都满足判断条件，则返回true，否则为false：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">const</span> isLessThan4 =&gt; <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> value &lt; <span class="hljs-number">4</span><br><span class="hljs-keyword">const</span> isLessThan6 =&gt; <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> value &lt; <span class="hljs-number">6</span><br>arr.<span class="hljs-title function_">every</span>(isLessThan4 ) <span class="hljs-comment">//false</span><br>arr.<span class="hljs-title function_">every</span>(isLessThan6 ) <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><ol start="5"><li>Array.some()</li></ol><p>此方法是将所有元素进行判断返回一个布尔值，如果存在元素都满足判断条件，则返回true，若所有元素都不满足判断条件，则返回false：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> arr= [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">const</span> isLessThan4 =&gt; <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> value &lt; <span class="hljs-number">4</span><br><span class="hljs-keyword">const</span> isLessThan6 =&gt; <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> value &gt; <span class="hljs-number">6</span><br>arr.<span class="hljs-title function_">some</span>(isLessThan4 ) <span class="hljs-comment">//true</span><br>arr.<span class="hljs-title function_">some</span>(isLessThan6 ) <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><ol start="6"><li>Array.reduce()</li></ol><p>此方法是所有元素调用返回函数，返回值为最后结果,传入的值必须是函数类型：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params">a, b</span>) =&gt; a + b<br><span class="hljs-keyword">let</span> sum = arr.<span class="hljs-title function_">reduce</span>(add)<br><span class="hljs-comment">//sum = 15  相当于累加的效果</span><br></code></pre></td></tr></table></figure><p>   与之相对应的还有一个 Array.reduceRight() 方法，区别是这个是从右向左操作的<br>　<br>7. Array.push()</p><p>此方法是在数组的后面添加新加元素，此方法改变了数组的长度：<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>arr.<span class="hljs-title function_">push</span>(<span class="hljs-number">6</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">//[1, 2, 3, 4, 5, 6]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-property">length</span>) <span class="hljs-comment">//6</span><br></code></pre></td></tr></table></figure></p><ol start="8"><li>Array.pop()</li></ol><p>此方法在数组后面删除最后一个元素，并返回数组，此方法改变了数组的长度：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>arr.<span class="hljs-title function_">pop</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">//[1, 2, 3, 4]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-property">length</span>) <span class="hljs-comment">//4</span><br></code></pre></td></tr></table></figure><ol start="9"><li>Array.shift()</li></ol><p>此方法在数组后面删除第一个元素，并返回数组，此方法改变了数组的长度：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>arr.<span class="hljs-title function_">shift</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">//[2, 3, 4, 5]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-property">length</span>) <span class="hljs-comment">//4 </span><br></code></pre></td></tr></table></figure><ol start="10"><li>Array.unshift()</li></ol><p>此方法是将一个或多个元素添加到数组的开头，并返回新数组的长度：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>arr.<span class="hljs-title function_">unshift</span>(<span class="hljs-number">6</span>, <span class="hljs-number">7</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">//[6, 7, 1, 2, 3, 4, 5]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-property">length</span>) <span class="hljs-comment">//7 </span><br></code></pre></td></tr></table></figure><ol start="11"><li>Array.isArray()</li></ol><p>判断一个对象是不是数组，返回的是布尔值</p><ol start="12"><li>Array.concat()</li></ol><p>此方法是一个可以将多个数组拼接成一个数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>arr2 = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">let</span> arr = arr1.<span class="hljs-title function_">concat</span>(arr2)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr)<span class="hljs-comment">//[1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><ol start="13"><li>Array.toString()</li></ol><p>此方法将数组转化为字符串：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">let</span> str = arr.<span class="hljs-title function_">toString</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str)<span class="hljs-comment">// 1,2,3,4,5</span><br></code></pre></td></tr></table></figure><ol start="14"><li>Array.join()</li></ol><p>此方法也是将数组转化为字符串：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">let</span> str1 = arr.<span class="hljs-title function_">toString</span>()<br><span class="hljs-keyword">let</span> str2 = arr.<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;,&#x27;</span>)<br><span class="hljs-keyword">let</span> str3 = arr.<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;##&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str1)<span class="hljs-comment">// 12345</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str2)<span class="hljs-comment">// 1,2,3,4,5</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str3)<span class="hljs-comment">// 1##2##3##4##5</span><br></code></pre></td></tr></table></figure><p>通过例子可以看出和toString的区别，可以设置元素之间的间隔~ </p><ol start="15"><li>Array.splice(开始位置， 删除的个数，元素)</li></ol><p>万能方法，可以实现增删改：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">let</span> arr1 = arr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">2</span>, <span class="hljs-number">0</span> <span class="hljs-string">&#x27;haha&#x27;</span>)<br><span class="hljs-keyword">let</span> arr2 = arr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-keyword">let</span> arr1 = arr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">2</span>, <span class="hljs-number">1</span> <span class="hljs-string">&#x27;haha&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1) <span class="hljs-comment">//[1, 2, &#x27;haha&#x27;, 3, 4, 5]新增一个元素</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr2) <span class="hljs-comment">//[1, 2] 删除三个元素</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr3) <span class="hljs-comment">//[1, 2, &#x27;haha&#x27;, 4, 5] 替换一个元素</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>es5&amp;es6 Array_test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>es5&amp;es6 object</title>
    <link href="/2019/07/17/object/"/>
    <url>/2019/07/17/object/</url>
    
    <content type="html"><![CDATA[<h2 id="es5-amp-amp-es6-x3D-gt-JS数组操作汇总"><a href="#es5-amp-amp-es6-x3D-gt-JS数组操作汇总" class="headerlink" title="es5&amp;&amp;es6 &#x3D;&gt; JS数组操作汇总"></a>es5&amp;&amp;es6 &#x3D;&gt; JS数组操作汇总</h2><ol><li><p>Object.assign(target, source1, source2, …)</p><p> 该方法主要用于对象的合并，将源对象 source 的所有可枚举属性合并到目标对象 target 上,此方法只拷贝源对象的自身属性，不拷贝继承的属性<br> Object.assign 方法实行的是浅拷贝，而不是深拷贝。也就是说，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。同名属性会替换<br> Object.assign 只能进行值的复制，如果要复制的值是一个取值函数，那么将求值后再复制<br> Object.assign 可以用来处理数组，但是会把数组视为对象</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">const</span> target = &#123;<br>    x : <span class="hljs-number">0</span>,<br>    y : <span class="hljs-number">1</span><br>&#125;;<br><br><span class="hljs-keyword">const</span> source = &#123;<br>    x : <span class="hljs-number">1</span>,<br>    z : <span class="hljs-number">2</span> ,<br>    fn : &#123;<br>        number : <span class="hljs-number">1</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(target, source);  <br><span class="hljs-comment">// target  &#123;x : 1, y : 1, z : 2, fn : &#123;number : 1&#125;&#125; // 同名属性会被覆盖</span><br><span class="hljs-comment">// source  &#123;x : 1, z : 2, fn : &#123;number : 1&#125;&#125;</span><br>target.<span class="hljs-property">fn</span>.<span class="hljs-property">number</span> = <span class="hljs-number">2</span>; <span class="hljs-comment">// 拷贝为对象引用</span><br><span class="hljs-comment">// source  &#123;x : 1, z : 2, fn : &#123;number : 2&#125;&#125;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-number">1</span><br>&#125;;<br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">country</span> = <span class="hljs-string">&#x27;china&#x27;</span>;<br><span class="hljs-keyword">let</span> student = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>student.<span class="hljs-property">age</span> = <span class="hljs-number">29</span> ;<br><span class="hljs-keyword">const</span> young = &#123;insterst : <span class="hljs-string">&#x27;sport&#x27;</span>&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(young,student);<br><span class="hljs-comment">// young &#123;instest : &#x27;sport&#x27; , age : 29</span><br><span class="hljs-comment">// 只能拷贝自身的属性，不能拷贝prototype</span><br><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>]) <span class="hljs-comment">// 把数组当作对象来处理</span><br><span class="hljs-comment">// [4, 5, 3]</span><br></code></pre></td></tr></table></figure></li><li><p>Object.create(prototype, [propertiesObject])<br> 使用指定的原型对象及其属性去创建一个新的对象</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> parent = &#123;<br>    x : <span class="hljs-number">1</span>,<br>    y : <span class="hljs-number">1</span><br>&#125;<br><br><span class="hljs-keyword">var</span> child = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(parent,&#123;<br>    z : &#123; <span class="hljs-comment">// z会成为创建对象的属性</span><br>        <span class="hljs-attr">writable</span>:<span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">configurable</span>:<span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;newAdd&quot;</span><br>    &#125;<br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(child);<br></code></pre></td></tr></table></figure></li><li><p>Object.defineProperties(obj, props)<br> 直接在一个对象上定义新的属性或修改现有属性，并返回该对象</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperties</span>(obj, <br>&#123;  <br><span class="hljs-string">&#x27;property1&#x27;</span>: &#123;    <br>    <span class="hljs-attr">value</span>: <span class="hljs-literal">true</span>,  <br>        <span class="hljs-attr">writable</span>: <span class="hljs-literal">true</span> <br>&#125;,  <br><span class="hljs-string">&#x27;property2&#x27;</span>: &#123;   <br>    <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;Hello&#x27;</span>,<br>    <span class="hljs-attr">writable</span>: <span class="hljs-literal">false</span>  <br>&#125; <span class="hljs-comment">// etc. etc.</span><br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj); <span class="hljs-comment">// &#123;property1: true, property2: &quot;Hello&quot;&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>Object.defineProperty(obj, prop, descriptor)<br> 在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-title class_">Object</span>, <span class="hljs-string">&#x27;is&#x27;</span>, <br>&#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">x, y</span>) &#123;    <br>        <span class="hljs-keyword">if</span> (x === y) &#123; <span class="hljs-comment">// 针对+0 不等于 -0的情况       </span><br>            <span class="hljs-keyword">return</span> x !== <span class="hljs-number">0</span> || <span class="hljs-number">1</span> / x === <span class="hljs-number">1</span> / y;   <br>        &#125;   <span class="hljs-comment">// 针对NaN的情况    </span><br>        <span class="hljs-keyword">return</span> x !== x &amp;&amp; y !== y;  <br>    &#125;,  <br>    <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span>,  <br>    <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">false</span>,  <br>    <span class="hljs-attr">writable</span>: <span class="hljs-literal">true</span> <br>&#125;); <span class="hljs-comment">// 注意不能同时设置(writable，value) 和 get，set方法，否则浏览器会报错  </span><br><span class="hljs-comment">// Invalid property descriptor.  Cannot both specify accessors and a value or writable attribute</span><br></code></pre></td></tr></table></figure></li><li><p>Object.keys(obj)</p><p> 返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和使用 for…in 循环遍历该对象时返回的顺序一致 （两者的主要区别是 一个 for-in 循环还会枚举其原型链上的属性）</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(arr)); <span class="hljs-comment">// [&#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;] /* Object 对象 */</span><br><span class="hljs-keyword">let</span> obj = &#123; <span class="hljs-attr">foo</span>: <span class="hljs-string">&quot;bar&quot;</span>, <span class="hljs-attr">baz</span>: <span class="hljs-number">42</span> &#125;, keys = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(keys); <span class="hljs-comment">// [&quot;foo&quot;,&quot;baz&quot;]</span><br></code></pre></td></tr></table></figure></li><li><p>Object.values()</p><p> 方法返回一个给定对象自己的所有可枚举属性值的数组，值的顺序与使用 for…in 循环的顺序相同 ( 区别在于 for-in 循环枚举原型链中的属性 )<br> Object.values会过滤属性名为 Symbol 值的属性</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> an_obj = &#123; <span class="hljs-number">100</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">7</span>: <span class="hljs-string">&#x27;c&#x27;</span> &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">values</span>(an_obj)); <span class="hljs-comment">// [&#x27;b&#x27;, &#x27;c&#x27;, &#x27;a&#x27;]</span><br><span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-number">0</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;c&#x27;</span> &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">values</span>(obj)); <span class="hljs-comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><br></code></pre></td></tr></table></figure></li><li><p>Object.entries()<br> 返回一个给定对象自身可枚举属性的键值对数组，其排列与使用 for…in 循环遍历该对象时返回的顺序一致（区别在于 for-in 循环也枚举原型链中的属性）</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;bar&#x27;</span>, <span class="hljs-attr">baz</span>: <span class="hljs-number">42</span> &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(obj)); <span class="hljs-comment">// [ [&#x27;foo&#x27;, &#x27;bar&#x27;], [&#x27;baz&#x27;, 42] ]</span><br><br><span class="hljs-keyword">const</span> simuArray = &#123; <span class="hljs-number">0</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;c&#x27;</span> &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(simuArray)); <span class="hljs-comment">// [ [&#x27;0&#x27;, &#x27;a&#x27;], [&#x27;1&#x27;, &#x27;b&#x27;], [&#x27;2&#x27;, &#x27;c&#x27;] ]</span><br></code></pre></td></tr></table></figure></li><li><p>hasOwnProperty()<br> 判断对象自身属性中是否具有指定的属性</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javaScript">obj.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&#x27;name&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li><p>Object.getOwnPropertyDescriptor(obj, prop)<br> 返回指定对象上一个自有属性对应的属性描述符。（自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）<br> 如果指定的属性存在于对象上，则返回其属性描述符对象（property descriptor），否则返回 undefined</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;age&#x27;</span>] ;<br>arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">val</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(obj,val)))<br><span class="hljs-comment">// &#123;value: &quot;js&quot;, writable: true, enumerable: true, configurable: true&#125;</span><br><span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure></li><li><p>Object.getOwnPropertyDescriptors(obj)<br>获取一个对象的所有自身属性的描述符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> obj = &#123;<br>    name : <span class="hljs-string">&#x27;js&#x27;</span>,<br>    age : <span class="hljs-number">20</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptors</span>(obj));<br><br><br><span class="hljs-keyword">const</span> source = &#123;<br><span class="hljs-keyword">set</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">const</span> target2 = &#123;&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperties</span>(target2, <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptors</span>(source));<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(target2, <span class="hljs-string">&#x27;foo&#x27;</span>)<br><br><br><span class="hljs-keyword">const</span> obj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<br>some_obj,<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptors</span>(&#123;<br>    <span class="hljs-attr">foo</span>: <span class="hljs-number">123</span>,<br>&#125;)<br>);<br></code></pre></td></tr></table></figure></li><li><p>Object.getOwnPropertyNames()<br>返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-number">0</span>: <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&quot;c&quot;</span>&#125;;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyNames</span>(obj).<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(val);<br>&#125;);<br><br><br><span class="hljs-keyword">var</span> obj = &#123;<br>    x : <span class="hljs-number">1</span>,<br>    y : <span class="hljs-number">2</span><br>&#125;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj,<span class="hljs-string">&#x27;z&#x27;</span>,&#123;<br>    enumerable : <span class="hljs-literal">false</span><br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyNames</span>(obj)); <span class="hljs-comment">// [&quot;x&quot;, &quot;y&quot;, &quot;z&quot;] 包含不可枚举属性 。</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj)); <span class="hljs-comment">// [&quot;x&quot;, &quot;y&quot;]      只包含可枚举属性 。</span><br></code></pre></td></tr></table></figure></li><li><p>Object.getOwnPropertySymbols()<br>返回一个给定对象自身的所有 Symbol 属性的数组</p></li><li><p>Object.getPrototypeOf()<br>返回指定对象的原型（内部[[Prototype]]属性的值，即proto，而非对象的prototype）</p></li><li><p>isPrototypeOf()<br>判断一个对象是否存在于另一个对象的原型链上</p></li><li><p>Object.setPrototypeOf(obj, prototype)<br>设置对象的原型对象</p></li><li><p>Object.is()<br>判断两个值是否相同<br>如果下列任何一项成立，则两个值相同：<br>两个值都是 undefined<br>两个值都是 null<br>两个值都是 true 或者都是 false<br>两个值是由相同个数的字符按照相同的顺序组成的字符串<br>两个值指向同一个对象<br>两个值都是数字并且<br>都是正零 +0<br>都是负零 -0<br>都是 NaN<br>都是除 0 和 NaN 外的其它同一个数字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;foo&#x27;</span>); <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(<span class="hljs-variable language_">window</span>, <span class="hljs-variable language_">window</span>); <span class="hljs-comment">// true</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;bar&#x27;</span>); <span class="hljs-comment">// false</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>([], []); <span class="hljs-comment">// false</span><br><br><span class="hljs-keyword">var</span> test = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(test, test); <span class="hljs-comment">// true</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>); <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// 特例</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(<span class="hljs-number">0</span>, -<span class="hljs-number">0</span>); <span class="hljs-comment">// false</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(-<span class="hljs-number">0</span>, -<span class="hljs-number">0</span>); <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(<span class="hljs-title class_">NaN</span>, <span class="hljs-number">0</span>/<span class="hljs-number">0</span>); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li><li><p>Object.freeze()<br>冻结一个对象，冻结指的是不能向这个对象添加新的属性，不能修改其已有属性的值，不能删除已有属性，以及不能修改该对象已有属性的可枚举性、可配置性、可写性。也就是说，这个对象永远是不可变的。该方法返回被冻结的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> obj = &#123;<br><span class="hljs-attr">prop</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;,<br><span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;bar&#x27;</span><br>&#125;;<br><br><span class="hljs-comment">// 新的属性会被添加, 已存在的属性可能</span><br><span class="hljs-comment">// 会被修改或移除</span><br>obj.<span class="hljs-property">foo</span> = <span class="hljs-string">&#x27;baz&#x27;</span>;<br>obj.<span class="hljs-property">lumpy</span> = <span class="hljs-string">&#x27;woof&#x27;</span>;<br><span class="hljs-keyword">delete</span> obj.<span class="hljs-property">prop</span>;<br><br><span class="hljs-comment">// 作为参数传递的对象与返回的对象都被冻结</span><br><span class="hljs-comment">// 所以不必保存返回的对象（因为两个对象全等）</span><br><span class="hljs-keyword">var</span> o = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">freeze</span>(obj);<br><br>o === obj; <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isFrozen</span>(obj); <span class="hljs-comment">// === true</span><br><br><span class="hljs-comment">// 现在任何改变都会失效</span><br>obj.<span class="hljs-property">foo</span> = <span class="hljs-string">&#x27;quux&#x27;</span>; <span class="hljs-comment">// 静默地不做任何事</span><br><span class="hljs-comment">// 静默地不添加此属性</span><br>obj.<span class="hljs-property">quaxxor</span> = <span class="hljs-string">&#x27;the friendly duck&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj);<br></code></pre></td></tr></table></figure></li><li><p>Object.isFrozen()<br>判断一个对象是否被冻结</p></li><li><p>Object.preventExtensions()<br>对象不能再添加新的属性。可修改，删除现有属性，不能添加新属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> obj = &#123;<br>    name :<span class="hljs-string">&#x27;lilei&#x27;</span>,<br>    age : <span class="hljs-number">30</span> ,<br>    sex : <span class="hljs-string">&#x27;male&#x27;</span><br>&#125;<br><br>obj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">preventExtensions</span>(obj);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj); <span class="hljs-comment">// &#123;name: &quot;lilei&quot;, age: 30, sex: &quot;male&quot;&#125;</span><br>obj.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;haha&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj); <span class="hljs-comment">// &#123;name: &quot;haha&quot;, age: 30, sex: &quot;male&quot;&#125;</span><br><span class="hljs-keyword">delete</span> obj.<span class="hljs-property">sex</span> ;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj); <span class="hljs-comment">// &#123;name: &quot;haha&quot;, age: 30&#125;</span><br>obj.<span class="hljs-property">address</span>  = <span class="hljs-string">&#x27;china&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj); <span class="hljs-comment">// &#123;name: &quot;haha&quot;, age: 30&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>Object.isExtensible()<br>判断对象是否是可扩展的，Object.preventExtensions，Object.seal 或 Object.freeze 方法都可以标记一个对象为不可扩展（non-extensible）</p></li><li><p>Object.seal()<br>Object.seal() 方法可以让一个对象密封，并返回被密封后的对象。密封一个对象会让这个对象变的不能添加新属性，且所有已有属性会变的不可配置。属性不可配置的效果就是属性变的不可删除，以及一个数据属性不能被重新定义成为访问器属性，或者反之。但属性的值仍然可以修改。尝试删除一个密封对象的属性或者将某个密封对象的属性从数据属性转换成访问器属性，结果会静默失败或抛出TypeError 异常. 不会影响从原型链上继承的属性。但 <strong>proto</strong> 属性的值也会不能修改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">prop</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;,<br>    <span class="hljs-attr">foo</span>: <span class="hljs-string">&quot;bar&quot;</span><br>&#125;;<br><br><span class="hljs-comment">// 可以添加新的属性,已有属性的值可以修改,可以删除</span><br>obj.<span class="hljs-property">foo</span> = <span class="hljs-string">&quot;baz&quot;</span>;<br>obj.<span class="hljs-property">lumpy</span> = <span class="hljs-string">&quot;woof&quot;</span>;<br><span class="hljs-keyword">delete</span> obj.<span class="hljs-property">prop</span>;<br><br><span class="hljs-keyword">var</span> o = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">seal</span>(obj);<br><br><span class="hljs-title function_">assert</span>(o === obj);<br><span class="hljs-title function_">assert</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isSealed</span>(obj) === <span class="hljs-literal">true</span>);<br><br><span class="hljs-comment">// 仍然可以修改密封对象上的属性的值.</span><br>obj.<span class="hljs-property">foo</span> = <span class="hljs-string">&quot;quux&quot;</span>;<br><br><span class="hljs-comment">// 但你不能把一个数据属性重定义成访问器属性.</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj, <span class="hljs-string">&quot;foo&quot;</span>, &#123; <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;g&quot;</span>; &#125; &#125;); <span class="hljs-comment">// 抛出TypeError异常</span><br><br><span class="hljs-comment">// 现在,任何属性值以外的修改操作都会失败.</span><br>obj.<span class="hljs-property">quaxxor</span> = <span class="hljs-string">&quot;the friendly duck&quot;</span>; <span class="hljs-comment">// 静默失败,新属性没有成功添加</span><br><span class="hljs-keyword">delete</span> obj.<span class="hljs-property">foo</span>; <span class="hljs-comment">// 静默失败,属性没有删除成功</span><br><br><span class="hljs-comment">// ...在严格模式中,会抛出TypeError异常</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fail</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-meta">&quot;use strict&quot;</span>;<br><span class="hljs-keyword">delete</span> obj.<span class="hljs-property">foo</span>; <span class="hljs-comment">// 抛出TypeError异常</span><br>obj.<span class="hljs-property">sparky</span> = <span class="hljs-string">&quot;arf&quot;</span>; <span class="hljs-comment">// 抛出TypeError异常</span><br>&#125;<br><span class="hljs-title function_">fail</span>();<br><br><span class="hljs-comment">// 使用Object.defineProperty方法同样会抛出异常</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj, <span class="hljs-string">&quot;ohai&quot;</span>, &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">17</span> &#125;); <span class="hljs-comment">// 抛出TypeError异常</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj, <span class="hljs-string">&quot;foo&quot;</span>, &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;eit&quot;</span> &#125;); <span class="hljs-comment">// 成功将原有值改变</span><br></code></pre></td></tr></table></figure></li><li><p>Object.isSealed()<br>判断一个对象是否被密封</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>es5&amp;es6 object</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>es5&amp;es6 Array</title>
    <link href="/2019/07/15/array/"/>
    <url>/2019/07/15/array/</url>
    
    <content type="html"><![CDATA[<h2 id="es5-amp-amp-es6-x3D-gt-JS数组操作汇总"><a href="#es5-amp-amp-es6-x3D-gt-JS数组操作汇总" class="headerlink" title="es5&amp;&amp;es6 &#x3D;&gt; JS数组操作汇总"></a>es5&amp;&amp;es6 &#x3D;&gt; JS数组操作汇总</h2><ol><li>Array.map()</li></ol><p>此方法是将数组中的每个元素调用一个提供的函数，结果作为一个新的数组返回，并没有改变原来的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">let</span> newArr = arr.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x*<span class="hljs-number">2</span>)<br><span class="hljs-comment">//arr= [1, 2, 3, 4, 5]   原数组保持不变</span><br><span class="hljs-comment">//newArr = [2, 4, 6, 8, 10] 返回新数组</span><br></code></pre></td></tr></table></figure><ol start="2"><li>Array.forEach()</li></ol><p>此方法是将数组中的每个元素执行传进提供的函数，没有返回值，直接改变原数组，注意和map方法区分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>num.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x*<span class="hljs-number">2</span>)<br><span class="hljs-comment">// arr = [2, 4, 6, 8, 10]  数组改变,注意和map区分</span><br></code></pre></td></tr></table></figure><ol start="3"><li>Array.filter()</li></ol><p>此方法是将所有元素进行判断，将满足条件的元素作为一个新的数组返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">const</span> isBigEnough =&gt; <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> value &gt;= <span class="hljs-number">3</span><br><span class="hljs-keyword">let</span> newArr = arr.<span class="hljs-title function_">filter</span>(isBigEnough )<br><span class="hljs-comment">//newNum = [3, 4, 5] 满足条件的元素返回为一个新的数组</span><br></code></pre></td></tr></table></figure><ol start="4"><li>Array.every()</li></ol><p>此方法是将所有元素进行判断返回一个布尔值，如果所有元素都满足判断条件，则返回true，否则为false：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">const</span> isLessThan4 =&gt; <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> value &lt; <span class="hljs-number">4</span><br><span class="hljs-keyword">const</span> isLessThan6 =&gt; <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> value &lt; <span class="hljs-number">6</span><br>arr.<span class="hljs-title function_">every</span>(isLessThan4 ) <span class="hljs-comment">//false</span><br>arr.<span class="hljs-title function_">every</span>(isLessThan6 ) <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><ol start="5"><li>Array.some()</li></ol><p>此方法是将所有元素进行判断返回一个布尔值，如果存在元素都满足判断条件，则返回true，若所有元素都不满足判断条件，则返回false：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> arr= [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">const</span> isLessThan4 =&gt; <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> value &lt; <span class="hljs-number">4</span><br><span class="hljs-keyword">const</span> isLessThan6 =&gt; <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> value &gt; <span class="hljs-number">6</span><br>arr.<span class="hljs-title function_">some</span>(isLessThan4 ) <span class="hljs-comment">//true</span><br>arr.<span class="hljs-title function_">some</span>(isLessThan6 ) <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><ol start="6"><li>Array.reduce()</li></ol><p>此方法是所有元素调用返回函数，返回值为最后结果,传入的值必须是函数类型：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params">a, b</span>) =&gt; a + b<br><span class="hljs-keyword">let</span> sum = arr.<span class="hljs-title function_">reduce</span>(add)<br><span class="hljs-comment">//sum = 15  相当于累加的效果</span><br></code></pre></td></tr></table></figure><p>   与之相对应的还有一个 Array.reduceRight() 方法，区别是这个是从右向左操作的<br>　<br>7. Array.push()</p><p>此方法是在数组的后面添加新加元素，此方法改变了数组的长度：<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>arr.<span class="hljs-title function_">push</span>(<span class="hljs-number">6</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">//[1, 2, 3, 4, 5, 6]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-property">length</span>) <span class="hljs-comment">//6</span><br></code></pre></td></tr></table></figure></p><ol start="8"><li>Array.pop()</li></ol><p>此方法在数组后面删除最后一个元素，并返回数组，此方法改变了数组的长度：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>arr.<span class="hljs-title function_">pop</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">//[1, 2, 3, 4]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-property">length</span>) <span class="hljs-comment">//4</span><br></code></pre></td></tr></table></figure><ol start="9"><li>Array.shift()</li></ol><p>此方法在数组后面删除第一个元素，并返回数组，此方法改变了数组的长度：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>arr.<span class="hljs-title function_">shift</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">//[2, 3, 4, 5]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-property">length</span>) <span class="hljs-comment">//4 </span><br></code></pre></td></tr></table></figure><ol start="10"><li>Array.unshift()</li></ol><p>此方法是将一个或多个元素添加到数组的开头，并返回新数组的长度：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>arr.<span class="hljs-title function_">unshift</span>(<span class="hljs-number">6</span>, <span class="hljs-number">7</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">//[6, 7, 1, 2, 3, 4, 5]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-property">length</span>) <span class="hljs-comment">//7 </span><br></code></pre></td></tr></table></figure><ol start="11"><li>Array.isArray()</li></ol><p>判断一个对象是不是数组，返回的是布尔值</p><ol start="12"><li>Array.concat()</li></ol><p>此方法是一个可以将多个数组拼接成一个数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>arr2 = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">let</span> arr = arr1.<span class="hljs-title function_">concat</span>(arr2)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr)<span class="hljs-comment">//[1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><ol start="13"><li>Array.toString()</li></ol><p>此方法将数组转化为字符串：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">let</span> str = arr.<span class="hljs-title function_">toString</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str)<span class="hljs-comment">// 1,2,3,4,5</span><br></code></pre></td></tr></table></figure><ol start="14"><li>Array.join()</li></ol><p>此方法也是将数组转化为字符串：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">let</span> str1 = arr.<span class="hljs-title function_">toString</span>()<br><span class="hljs-keyword">let</span> str2 = arr.<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;,&#x27;</span>)<br><span class="hljs-keyword">let</span> str3 = arr.<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;##&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str1)<span class="hljs-comment">// 12345</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str2)<span class="hljs-comment">// 1,2,3,4,5</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str3)<span class="hljs-comment">// 1##2##3##4##5</span><br></code></pre></td></tr></table></figure><p>通过例子可以看出和toString的区别，可以设置元素之间的间隔~ </p><ol start="15"><li>Array.splice(开始位置， 删除的个数，元素)</li></ol><p>万能方法，可以实现增删改：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">let</span> arr1 = arr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">2</span>, <span class="hljs-number">0</span> <span class="hljs-string">&#x27;haha&#x27;</span>)<br><span class="hljs-keyword">let</span> arr2 = arr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-keyword">let</span> arr1 = arr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">2</span>, <span class="hljs-number">1</span> <span class="hljs-string">&#x27;haha&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1) <span class="hljs-comment">//[1, 2, &#x27;haha&#x27;, 3, 4, 5]新增一个元素</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr2) <span class="hljs-comment">//[1, 2] 删除三个元素</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr3) <span class="hljs-comment">//[1, 2, &#x27;haha&#x27;, 4, 5] 替换一个元素</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>es5&amp;es6 Array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>es5&amp;es6 string</title>
    <link href="/2019/07/09/string/"/>
    <url>/2019/07/09/string/</url>
    
    <content type="html"><![CDATA[<h2 id="es5-x3D-gt-JS字符串操作汇总"><a href="#es5-x3D-gt-JS字符串操作汇总" class="headerlink" title="es5 &#x3D;&gt; JS字符串操作汇总"></a>es5 &#x3D;&gt; JS字符串操作汇总</h2><ol><li>字符串转换</li></ol><p>字符串转换是最基础的要求和工作，你可以将任何类型的数据都转换为字符串，你可以用下面三种方法的任何一种：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> num=<span class="hljs-number">24</span>;<br><span class="hljs-keyword">var</span> mystr=num.<span class="hljs-title function_">toString</span>();    <span class="hljs-comment">//&quot;24&quot;</span><br></code></pre></td></tr></table></figure><p>你同样可以这么做：<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> num=<span class="hljs-number">24</span>;<br><span class="hljs-keyword">var</span> mystr=num.<span class="hljs-title function_">toString</span>();    <span class="hljs-comment">//&quot;24&quot;</span><br></code></pre></td></tr></table></figure><br>或者，在简单点儿：<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> num=<span class="hljs-number">24</span>;<br><span class="hljs-keyword">var</span> mystr=<span class="hljs-string">&quot;&quot;</span> + num;    <span class="hljs-comment">//&quot;24&quot;</span><br></code></pre></td></tr></table></figure><br>2. 字符串分割</p><p>将字符串进行拆分返回一个新的数组，JavaScript就给我们提供了一个非常方便的函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> mystr=<span class="hljs-string">&quot;qingchenghuwoguoxiansheng,woaishenghuo,woaiziji&quot;</span>;<br><span class="hljs-keyword">var</span> arr1=mystr.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;,&quot;</span>);    <span class="hljs-comment">//[&quot;qingchenghuwoguoxiansheng&quot;,&quot;woaishenghuo&quot;,&quot;woaiziji&quot;];</span><br><span class="hljs-keyword">var</span> arr2=mystr.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&quot;</span>);        <span class="hljs-comment">//[&quot;q&quot;,&quot;i&quot;,&quot;n&quot;,&quot;g&quot;,&quot;c&quot;,&quot;h&quot;,&quot;e&quot;,&quot;n&quot;,&quot;g&quot;,&quot;h&quot;,&quot;u&quot;,&quot;w&quot;,&quot;o&quot;,&quot;g&quot;,&quot;u&quot;,&quot;o&quot;,&quot;x&quot;,&quot;i&quot;,&quot;a&quot;,&quot;n&quot;,&quot;s&quot;,&quot;h&quot;,&quot;e&quot;,&quot;n&quot;,&quot;g&quot;,&quot;,&quot;,&quot;w&quot;,&quot;o&quot;,&quot;a&quot;,&quot;i&quot;,&quot;s&quot;,&quot;h&quot;,&quot;e&quot;,&quot;n&quot;,&quot;g&quot;,&quot;h&quot;,&quot;u&quot;,&quot;o&quot;,&quot;,&quot;,&quot;w&quot;,&quot;o&quot;,&quot;a&quot;,&quot;i&quot;,&quot;z&quot;,&quot;i&quot;,&quot;j&quot;,&quot;i&quot;];</span><br></code></pre></td></tr></table></figure><p>split()的第二个参数，表示返回的字符串数组的最大长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> mystr=<span class="hljs-string">&quot;qingchenghuwoguoxiansheng,woaishenghuo,woaiziji&quot;</span>;<br><span class="hljs-keyword">var</span> arr1=mystr.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;,&quot;</span>,<span class="hljs-number">2</span>); <span class="hljs-comment">//[&quot;qingchenghuwoguoxiansheng&quot;,&quot;woaishenghuo&quot;];</span><br><span class="hljs-keyword">var</span> arr2=mystr.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-number">8</span>); <span class="hljs-comment">//[&quot;q&quot;,&quot;i&quot;,&quot;n&quot;,&quot;g&quot;,&quot;c&quot;,&quot;h&quot;,&quot;e&quot;,&quot;n&quot;];</span><br></code></pre></td></tr></table></figure><p>3、字符串替换</p><p>仅仅查找到字符串并不会是题目的停止，一般题目还经常会要求你去进行替换操作，那就继续看以下代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> mystr=<span class="hljs-string">&quot;wozaijinxingzifuchuantihuancaozuo,zifuchuantihuano&quot;</span>;<br><span class="hljs-keyword">var</span> replaceStr=mystr.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;zifuchuan&quot;</span>,<span class="hljs-string">&quot; &quot;</span>);    <span class="hljs-comment">//wozaijinxing tihuancaozuo,zifuchuantihuano</span><br><span class="hljs-keyword">var</span> replaceStr=mystr.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/zifuchuan/</span>,<span class="hljs-string">&quot; &quot;</span>);    <span class="hljs-comment">//wozaijinxing tihuancaozuo,zifuchuantihuano</span><br><span class="hljs-keyword">var</span> replaceStr=mystr.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/zifuchuan/g</span>,<span class="hljs-string">&quot; &quot;</span>);    <span class="hljs-comment">//wozaijinxing tihuancaozuo, tihuano</span><br></code></pre></td></tr></table></figure><p>默认只进行第一次匹配操作的替换，想要全局替换，需要置上正则全局标识g</p><p>4、获取字符串长度</p><p>获取字符串的长度经常会用到，方法很简单：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> mystr=<span class="hljs-string">&quot;qingchenghuwoguoxiansheng,woaishenghuo,woaiziji&quot;</span>;<br><span class="hljs-keyword">var</span> arrLength=mystr.<span class="hljs-property">length</span>;    <span class="hljs-comment">//47</span><br></code></pre></td></tr></table></figure><p>5、查询子字符串</p><p>判断字符串内是否包含子串，不少开发者会使用for循环来判断，而忘记了JavaScript提供子串函数：</p><p>indexOf()，该Of() 方法对大小写敏感。返回字符串中一个子串第一处出现的索引（从左到右搜索）。如果没有匹配项，返回 -1 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> mystr=<span class="hljs-string">&quot;Hello world!&quot;</span>;<br><span class="hljs-keyword">var</span> index=mystr.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;llo&quot;</span>);    <span class="hljs-comment">//2</span><br><span class="hljs-keyword">var</span> index1=mystr.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;l&quot;</span>);    <span class="hljs-comment">//2</span><br><span class="hljs-keyword">var</span> index2=mystr.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;l&quot;</span>,<span class="hljs-number">3</span>);    <span class="hljs-comment">//3</span><br></code></pre></td></tr></table></figure><p>lastIndexOf()，该方法对大小写敏感。返回字符串中一个子串最后一处出现的索引（从右到左搜索），如果没有匹配项，返回 -1 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> mystr=<span class="hljs-string">&quot;Hello world!&quot;</span>;<br><span class="hljs-keyword">var</span> index=mystr.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&quot;llo&quot;</span>);    <span class="hljs-comment">//2</span><br><span class="hljs-keyword">var</span> index1=mystr.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&quot;l&quot;</span>);    <span class="hljs-comment">//9</span><br><span class="hljs-keyword">var</span> index2=mystr.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&quot;l&quot;</span>,<span class="hljs-number">4</span>);    <span class="hljs-comment">//3</span><br></code></pre></td></tr></table></figure><p>6、返回指定位置的字符或其字符编码值</p><p>查找给定位置的字符，可以使用如下函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> mystr=<span class="hljs-string">&quot;Hello World!&quot;</span>;<br><span class="hljs-keyword">var</span> index=mystr.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">7</span>);    <span class="hljs-comment">//o</span><br></code></pre></td></tr></table></figure><p>同样，它的一个兄弟函数就是查找对应位置的字符编码值，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> mystr=<span class="hljs-string">&quot;Hello World!&quot;</span>;<br><span class="hljs-keyword">var</span> charCode=mystr. <span class="hljs-title function_">charCodeAt</span>(<span class="hljs-number">7</span>);    <span class="hljs-comment">//111</span><br></code></pre></td></tr></table></figure><p>7、 字符串匹配</p><p>可以直接通过字符串进行匹配，也可以通过正则进行匹配，可能需要你对正则表达式有一定的了解，先来看看match()函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> mystr=<span class="hljs-string">&quot;hi,mynameisguoxiansheng6,33iswho?&quot;</span>;<br><span class="hljs-keyword">var</span> matchStr=mystr.<span class="hljs-title function_">match</span>(<span class="hljs-string">&quot;guo&quot;</span>);    <span class="hljs-comment">//guo</span><br><span class="hljs-keyword">var</span> matchStr1=mystr.<span class="hljs-title function_">match</span>(<span class="hljs-string">&quot;Guo&quot;</span>);    <span class="hljs-comment">//null</span><br><span class="hljs-keyword">var</span> regexp1=<span class="hljs-regexp">/\d+/g</span>;<br><span class="hljs-keyword">var</span> regexp2=<span class="hljs-regexp">/guo/g</span>;<br><span class="hljs-keyword">var</span> regexp3=<span class="hljs-regexp">/guo/</span>;<br><span class="hljs-keyword">var</span> matchStr2=mystr.<span class="hljs-title function_">match</span>(regexp1);    <span class="hljs-comment">//[&quot;6&quot;,&quot;33&quot;]</span><br><span class="hljs-keyword">var</span> matchStr3=mystr.<span class="hljs-title function_">match</span>(regexp2);    <span class="hljs-comment">//[&quot;guo&quot;]</span><br><span class="hljs-keyword">var</span> matchStr3=mystr.<span class="hljs-title function_">match</span>(regexp3);    <span class="hljs-comment">//[&quot;guo&quot;,index:11,input:&quot;hi,mynameisguoxiansheng6,33iswho?&quot;]</span><br>matchStr3.<span class="hljs-property">index</span>    <span class="hljs-comment">//11</span><br>matchStr3.<span class="hljs-property">input</span>    <span class="hljs-comment">//hi,mynameisguoxiansheng6,33iswho?</span><br></code></pre></td></tr></table></figure><p>注意：1.此处使用字符串直接进行匹配，被匹配的字符串内包含要匹配的字符串时，返回所要匹配的字符串。</p><p>　　　2.如果使用正则匹配字符串时，如果正则表达式没有 g (全局标识)标志，返回与正则匹配相同的结果。而且返回的数组拥有一个额外的 input 属性，该属性包含原始字符串。另外，还拥有一个 index 属性，该属性表示匹配结果在被字符串中的索引（以0开始）。如果正则表达式包含 g 标志，则该方法返回匹配字符串的数组。</p><p>再来看看使用exec()函数： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> mystr=<span class="hljs-string">&quot;hi,mynameisguoxiansheng6,33iswho?&quot;</span>;<br><span class="hljs-keyword">var</span> regexp1=<span class="hljs-regexp">/guo/g</span>;<br><span class="hljs-keyword">var</span> matchStr=regexp1.<span class="hljs-title function_">exec</span>(mystr);  <span class="hljs-comment">//[&quot;guo&quot;]</span><br><span class="hljs-keyword">var</span> regexp2=<span class="hljs-regexp">/guo/</span>;<br><span class="hljs-keyword">var</span> matchStr1=regexp2.<span class="hljs-title function_">exec</span>(mystr);    <span class="hljs-comment">//[&quot;guo&quot;,index:11,input:&quot;hi,mynameisguoxiansheng6,33iswho?&quot;]</span><br>matchStr1.<span class="hljs-property">index</span>    <span class="hljs-comment">//11</span><br>matchStr1.<span class="hljs-property">input</span>    <span class="hljs-comment">//hi,mynameisguoxiansheng6,33iswho?</span><br></code></pre></td></tr></table></figure><p>简单吧，仅仅是把正则和字符串换了个位置，即exec()函数是在正则上调用，传递字符串的参数。对于上面两个方法，匹配的结果都是返回第一个匹配成功的字符串，如果匹配失败则返回null。</p><p>再来看一个类似的函数search()：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> mystr = <span class="hljs-string">&quot;hi,mynameisguoxiansheng6,33iswho?&quot;</span>;<br><span class="hljs-keyword">var</span> regexp1 = <span class="hljs-regexp">/guo/</span>;<br><span class="hljs-keyword">var</span> matchStr = mystr.<span class="hljs-title function_">search</span>(regexp1);    <span class="hljs-comment">//11</span><br></code></pre></td></tr></table></figure><p>进行正则匹配查找。如果查找成功，返回字符串中匹配的索引值。否则返回 -1</p><p>8、字符串连接</p><p>可以将两个或多个字符串进行加法操作，同时可以使用JavaScript提供的concat函数：</p><p>先看加法操作进行字符串连接：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> mystr1=<span class="hljs-string">&quot;Hello&quot;</span>;<br><span class="hljs-keyword">var</span> mystr2=<span class="hljs-string">&quot;world!&quot;</span>;<br><span class="hljs-keyword">var</span> newStr=mystr1+<span class="hljs-string">&quot; &quot;</span>+mystr2;    <span class="hljs-comment">//Hello world!</span><br></code></pre></td></tr></table></figure><p>是不是很简单呀，那继续看看concat函数吧：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> mystr1=<span class="hljs-string">&quot;Hello&quot;</span>;<br><span class="hljs-keyword">var</span> mystr2=<span class="hljs-string">&quot; world,&quot;</span>;<br><span class="hljs-keyword">var</span> mystr3=<span class="hljs-string">&quot;Hello&quot;</span>;<br><span class="hljs-keyword">var</span> mystr4=<span class="hljs-string">&quot;guoxiansheng&quot;</span>;<br><span class="hljs-keyword">var</span> newStr=mystr1.<span class="hljs-title function_">concat</span>(mystr2+mystr3+<span class="hljs-string">&quot; &quot;</span>+mystr4);    <span class="hljs-comment">//Hello world,Hello guoxiansheng</span><br></code></pre></td></tr></table></figure><p>concat()函数可以有多个参数，传递多个字符串，拼接多个字符串。</p><p>9、字符串切割和提取</p><p>有三种可以从字符串中抽取和切割的方法：</p><p>第一种，slice()函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> mystr=<span class="hljs-string">&quot;hello world!&quot;</span>;<br><span class="hljs-keyword">var</span> sliceStr1=mystr.<span class="hljs-title function_">slice</span>(-<span class="hljs-number">3</span>);    <span class="hljs-comment">//ld!</span><br><span class="hljs-keyword">var</span> sliceStr2=mystr.<span class="hljs-title function_">slice</span>(-<span class="hljs-number">3</span>,-<span class="hljs-number">1</span>);    <span class="hljs-comment">//ld</span><br><span class="hljs-keyword">var</span> sliceStr3=mystr.<span class="hljs-title function_">slice</span>(<span class="hljs-number">3</span>);    <span class="hljs-comment">//lo world!</span><br><span class="hljs-keyword">var</span> sliceStr4=mystr.<span class="hljs-title function_">slice</span>(<span class="hljs-number">3</span>,<span class="hljs-number">7</span>);    <span class="hljs-comment">//lo w</span><br></code></pre></td></tr></table></figure><p>第二种：substring()函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> mystr=<span class="hljs-string">&quot;hello world!&quot;</span>;<br><span class="hljs-keyword">var</span> sliceStr1=mystr.<span class="hljs-title function_">substring</span>(<span class="hljs-number">3</span>);    <span class="hljs-comment">//lo world!</span><br><span class="hljs-keyword">var</span> sliceStr2=mystr.<span class="hljs-title function_">substring</span>(<span class="hljs-number">3</span>,<span class="hljs-number">7</span>);    <span class="hljs-comment">//lo w</span><br></code></pre></td></tr></table></figure><p>第三种：substr()函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> mystr=<span class="hljs-string">&quot;hello world!&quot;</span>;<br><span class="hljs-keyword">var</span> sliceStr1=mystr.<span class="hljs-title function_">substr</span>(<span class="hljs-number">3</span>);    <span class="hljs-comment">//lo world!</span><br><span class="hljs-keyword">var</span> sliceStr2=mystr.<span class="hljs-title function_">substr</span>(<span class="hljs-number">3</span>,<span class="hljs-number">7</span>);    <span class="hljs-comment">//lo wo</span><br></code></pre></td></tr></table></figure><p>注：1.slice() 可以为负数，如果起始位置为负数，则从字符串最后一位向前找对应位数并且向后取结束位置，如果为正整数则从前往后取起始位置到结束位置。<br>　　2.substring()只能非负整数，截取起始结束位置同slice()函数一致。</p><p>　　3.substr()与第一、第二种函数不同，从起始位置开始截取，结束位置为第二个参数截取的字符串最大长度。</p><p>以上三种函数未填第二参数时，自动截取起始位置到字符串末尾。</p><p>10、字符串大小写转换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> mystr=<span class="hljs-string">&quot;Hello World!&quot;</span>;<br><span class="hljs-keyword">var</span> lowCaseStr=mystr.<span class="hljs-title function_">toLowerCase</span>();    <span class="hljs-comment">//hello world!</span><br><span class="hljs-keyword">var</span> upCaseStr=mystr. <span class="hljs-title function_">toUpperCase</span>();    <span class="hljs-comment">//HELLO WORLD!</span><br></code></pre></td></tr></table></figure><p>  11、字符串去空格</p><p>trim方法用来删除字符串前后的空格 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> mystr=<span class="hljs-string">&quot;     hello world      &quot;</span>;  <br><span class="hljs-keyword">var</span> trimStr=mystr.<span class="hljs-title function_">trim</span>();    <span class="hljs-comment">//hello world</span><br></code></pre></td></tr></table></figure><p>常用的字符串操作</p><p>1、字符串去重</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> str=<span class="hljs-string">&quot;aahhgggsssjjj&quot;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">removeRepeat</span>(<span class="hljs-params">msg</span>)&#123;  <br>    <span class="hljs-keyword">var</span> res=[];  <br>    <span class="hljs-keyword">var</span> arr=msg.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&quot;</span>);  <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;arr.<span class="hljs-property">length</span>;i++)&#123;  <br>        <span class="hljs-keyword">if</span>(res.<span class="hljs-title function_">indexOf</span>(arr[i])==-<span class="hljs-number">1</span>)&#123;  <br>            res.<span class="hljs-title function_">push</span>(arr[i]);  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&quot;</span>);  <br>&#125;  <br><span class="hljs-title function_">removeRepeat</span>(str);    <span class="hljs-comment">//ahgsj</span><br></code></pre></td></tr></table></figure><p>2、判断字符串中字符出现的次数</p><pre><code class="hljs">(1).先实现字符串去重  (2).然后对去重后的数组用for循环操作，分别与原始数组中各个值进行比较，如果相等则count++,循环结束将count保存在sum数组中，然后将count重置为0  (3).这样一来去重后的数组中的元素在原数组中出现的次数与sum数组中的元素是一一对应的  </code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> str=<span class="hljs-string">&quot;aacccbbeeeddd&quot;</span>;  <br><span class="hljs-keyword">var</span> sum=[];  <br><span class="hljs-keyword">var</span> res=[];  <br><span class="hljs-keyword">var</span> count=<span class="hljs-number">0</span>;  <br><span class="hljs-keyword">var</span> arr=str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&quot;</span>);  <br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;arr.<span class="hljs-property">length</span>;i++)&#123;  <br>    <span class="hljs-keyword">if</span>(res.<span class="hljs-title function_">indexOf</span>(arr[i])==-<span class="hljs-number">1</span>)&#123;  <br>        res.<span class="hljs-title function_">push</span>(arr[i]);  <br>    &#125;  <br>&#125;  <br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;res.<span class="hljs-property">length</span>;i++)&#123;  <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j=<span class="hljs-number">0</span>;j&lt;arr.<span class="hljs-property">length</span>;j++)&#123;  <br>        <span class="hljs-keyword">if</span>(arr[j]==res[i])&#123;  <br>            count++;  <br>        &#125;  <br>    &#125;  <br>    sum.<span class="hljs-title function_">push</span>(count);  <br>    count=<span class="hljs-number">0</span>;  <br>&#125;  <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);    <span class="hljs-comment">//[&quot;a&quot;, &quot;c&quot;, &quot;b&quot;, &quot;e&quot;, &quot;d&quot;]  </span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;res.<span class="hljs-property">length</span>;i++)&#123;  <br>    <span class="hljs-keyword">var</span> str=(sum[i]%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)?<span class="hljs-string">&quot;偶数&quot;</span>:<span class="hljs-string">&quot;奇数&quot;</span>;  <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res[i]+<span class="hljs-string">&quot;出现了&quot;</span>+sum[i]+<span class="hljs-string">&quot;次&quot;</span>);  <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res[i]+<span class="hljs-string">&quot;出现了&quot;</span>+str+<span class="hljs-string">&quot;次&quot;</span>);  <br>&#125;  <br></code></pre></td></tr></table></figure><h2 id="es6-x3D-gt-JS字符串操作汇总"><a href="#es6-x3D-gt-JS字符串操作汇总" class="headerlink" title="es6 &#x3D;&gt; JS字符串操作汇总"></a>es6 &#x3D;&gt; JS字符串操作汇总</h2><ol><li>at()</li></ol><p>es5对字符串对象提供了charAt方法，但会字符串给定位置字符。但是该方法不能识别码点大于0xFFFF的字符（at()方法可以）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-string">&#x27;abc&#x27;</span>.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">0</span>) <span class="hljs-comment">// &#x27;a&#x27;</span><br><span class="hljs-string">&#x27;吉&#x27;</span>.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">0</span>) <span class="hljs-comment">// &#x27;\uD842&#x27;</span><br><br><span class="hljs-string">&#x27;abc&#x27;</span>.<span class="hljs-title function_">at</span>(<span class="hljs-number">0</span>) <span class="hljs-comment">// &#x27;a&#x27;</span><br><span class="hljs-string">&#x27;吉&#x27;</span>.<span class="hljs-title function_">at</span>(<span class="hljs-number">0</span>) <span class="hljs-comment">// &#x27;吉&#x27;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>includes()、startsWith()、endsWidth()</li></ol><p>includes(): 返回布尔值，表示是否找到了参数字符串<br>startsWith(): 返回布尔值，表示参数字符串是否在源字符串的头部<br>endsWidth(): 返回布尔值，表示参数字符串是否在源字符串的尾部</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> s = <span class="hljs-string">&#x27;Hello world!&#x27;</span>;<br><br>s.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>) <span class="hljs-comment">// true</span><br>s.<span class="hljs-title function_">endsWidth</span>(<span class="hljs-string">&#x27;!&#x27;</span>) <span class="hljs-comment">// true</span><br>s.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;o&#x27;</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>这3个方法都支持第二个参数，表示开始搜索的位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> s = <span class="hljs-string">&#x27;Hello world!&#x27;</span>;<br><br>s.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>,<span class="hljs-number">6</span>) <span class="hljs-comment">// true</span><br>s.<span class="hljs-title function_">endsWidth</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>,<span class="hljs-number">5</span>) <span class="hljs-comment">// true</span><br>s.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>,<span class="hljs-number">6</span>) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><ol start="3"><li>repeat()</li></ol><p>repeat 方法返回一个新字符串，表示将愿字符串重复n次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-string">&#x27;x&#x27;</span>.<span class="hljs-title function_">repeat</span>(<span class="hljs-number">3</span>) <span class="hljs-comment">// &#x27;xxx&#x27;</span><br><span class="hljs-string">&#x27;hello&#x27;</span>.<span class="hljs-title function_">repeat</span>(<span class="hljs-number">2</span>) <span class="hljs-comment">// &#x27;hellohello&#x27;</span><br><span class="hljs-string">&#x27;na&#x27;</span>.<span class="hljs-title function_">reapeat</span>(<span class="hljs-number">0</span>) <span class="hljs-comment">// &#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>参数为小数，会被取整；负数或者Infinity，会报错；0到-1之间小数等同与0，字符串则会先转化为数字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-string">&#x27;x&#x27;</span>.<span class="hljs-title function_">repeat</span>(<span class="hljs-number">2.9</span>) <span class="hljs-comment">// &#x27;xx&#x27;</span><br><span class="hljs-string">&#x27;hello&#x27;</span>.<span class="hljs-title function_">repeat</span>(-<span class="hljs-number">0.9</span>) <span class="hljs-comment">// &#x27;&#x27;</span><br><span class="hljs-string">&#x27;na&#x27;</span>.<span class="hljs-title function_">reapeat</span>(-<span class="hljs-number">2</span>) <span class="hljs-comment">// RangeError</span><br><span class="hljs-string">&#x27;na&#x27;</span>.<span class="hljs-title function_">reapeat</span>(na) <span class="hljs-comment">// &#x27;&#x27;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>padStart()、padEnd()</li></ol><p>padStart()用于头部补全字符串的长度，padEnd()用于尾部补全字符串的长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-string">&#x27;x&#x27;</span>.<span class="hljs-title function_">padStart</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;ab&#x27;</span>) <span class="hljs-comment">// &#x27;abx&#x27;</span><br><span class="hljs-string">&#x27;x&#x27;</span>.<span class="hljs-title function_">padEnd</span>(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;ab&#x27;</span>) <span class="hljs-comment">// &#x27;xaba&#x27;</span><br></code></pre></td></tr></table></figure><p>如果省略第二个参数，用空格补全，如何字符串长度大于第一个参数，返回原字符串，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-string">&#x27;xxx&#x27;</span>.<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;ab&#x27;</span>) <span class="hljs-comment">// &#x27;abx&#x27;</span><br><span class="hljs-string">&#x27;x&#x27;</span>.<span class="hljs-title function_">padEnd</span>(<span class="hljs-number">4</span>) <span class="hljs-comment">// &#x27;x   &#x27;</span><br></code></pre></td></tr></table></figure><p>padStart()常见用途补全指定位数，另一个用途提示字符串格式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-string">&#x27;1&#x27;</span>.<span class="hljs-title function_">padStart</span>(<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;0&#x27;</span>) <span class="hljs-comment">// &#x27;0000000001&#x27;</span><br><span class="hljs-string">&#x27;12&#x27;</span>.<span class="hljs-title function_">padStart</span>(<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;YYYY-MM-DD&#x27;</span>) <span class="hljs-comment">// &#x27;YYYY-MM-12&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>String(es5&amp;es6)</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react:propsVSstate</title>
    <link href="/2019/05/02/react-propsVSstate/"/>
    <url>/2019/05/02/react-propsVSstate/</url>
    
    <content type="html"><![CDATA[<h2 id="React之Props，及与state的区别"><a href="#React之Props，及与state的区别" class="headerlink" title="React之Props，及与state的区别"></a>React之Props，及与state的区别</h2><p>组件内可以通过props来获得属性值，看下面的实例先来回顾 一下Props最基本的使用：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://zhangpeiyue.com/wp-content/uploads/2018/08/react.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://zhangpeiyue.com/wp-content/uploads/2018/08/react-dom.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://zhangpeiyue.com/wp-content/uploads/2018/08/babel.min_.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;wrap&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//此处的构造器是可以省略的</span></span><br><span class="language-javascript">        <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">super</span>(props);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>好神奇！ &#123;this.props.siteName&#125;!<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> element = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyComponent</span> <span class="hljs-attr">siteName</span>=<span class="hljs-string">&quot;zhangpeiyue.com&quot;</span>/&gt;</span></span>;</span><br><span class="language-javascript">    <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(</span><br><span class="language-javascript">        element,</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#wrap&quot;</span>)</span><br><span class="language-javascript">    );</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过以上实例咱们知道通过props可以得到组件MyComponent的属性siteName的值。</p><h3 id="通过defaultProps添加默认Props"><a href="#通过defaultProps添加默认Props" class="headerlink" title="通过defaultProps添加默认Props"></a>通过defaultProps添加默认Props</h3><p>咱们可以通过为组件类添加defaultProps属性来为props设置默认值。defaultProps是一个对象，只要将添加的值放到defaultProps的属性中即可，例如：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>    render() &#123;<br>        <span class="hljs-comment">//此处返回   &lt;div&gt;小张今年18岁了&lt;/div&gt;</span><br>        <span class="hljs-keyword">return</span> &lt;div&gt;<br>            &#123;<span class="hljs-keyword">this</span>.props.userName&#125;今年&#123;<span class="hljs-keyword">this</span>.props.age&#125;岁了！<br>        &lt;/div&gt;;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//为组件添加默认属性 userName与age</span><br><span class="hljs-type">MyComponent</span>.defaultProps=&#123;<br>    userName:<span class="hljs-string">&quot;小张&quot;</span>,<br>    age:<span class="hljs-number">18</span><br>&#125;<br><span class="hljs-keyword">var</span> element = &lt;<span class="hljs-type">MyComponent</span>/&gt;;<br><span class="hljs-type">ReactDOM</span>.render(<br>    element,<br>    document.querySelector(<span class="hljs-string">&quot;#wrap&quot;</span>)<br>);<br></code></pre></td></tr></table></figure><h3 id="State和Props"><a href="#State和Props" class="headerlink" title="State和Props"></a>State和Props</h3><p>咱们可以通过在父组件当中设置State，然后通过在子组件上使用props来接收收父组件的state值。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">//父组件</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>    constructor()&#123;<br>        <span class="hljs-keyword">super</span>();<br>        <span class="hljs-comment">//设置sate,添加name与age属性</span><br>        <span class="hljs-keyword">this</span>.state=&#123;<br>            name:<span class="hljs-string">&quot;张培跃&quot;</span>,<br>            age:<span class="hljs-number">18</span><br>        &#125;<br>    &#125;<br>    render() &#123;<br>        <span class="hljs-keyword">return</span> &lt;div&gt;<br>            &lt;<span class="hljs-type">Name</span> name=&#123;<span class="hljs-keyword">this</span>.state.name&#125;/&gt;<br>            &lt;<span class="hljs-type">Age</span> age=&#123;<span class="hljs-keyword">this</span>.state.age&#125;/&gt;<br>        &lt;/div&gt;;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//子组件Name</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Name</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>    render()&#123;<br>        <span class="hljs-keyword">return</span> &lt;div&gt;&#123;<span class="hljs-keyword">this</span>.props.name&#125;&lt;/div&gt;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//子组件Age</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Age</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>    render()&#123;<br>        <span class="hljs-keyword">return</span> &lt;div&gt;&#123;<span class="hljs-keyword">this</span>.props.age&#125;&lt;/div&gt;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> element = &lt;<span class="hljs-type">MyComponent</span>/&gt;;<br><span class="hljs-type">ReactDOM</span>.render(<br>    element,<br>    document.querySelector(<span class="hljs-string">&quot;#wrap&quot;</span>)<br>);<br></code></pre></td></tr></table></figure><h3 id="使用PropTypes进行类型检测"><a href="#使用PropTypes进行类型检测" class="headerlink" title="使用PropTypes进行类型检测"></a>使用PropTypes进行类型检测</h3><p>为了保证咱们的组件被正确使用，React提供了可以对Props进行验证的功能PropTypes。PropTypes为组件类自身的属性，提供了很多验证器，来验证传入的数据是否有效。当传入的数据无效时，JavaScript控制台会抛出警告。<br>另外需要注意的是，在开发环境下，当你使用了一个无效的值作为prop时，控件台会出现警告;在生产环境下，为了性能考虑会将PropTypes忽略掉！<br>要想使用propTypes,首先要对prop-type.js文件进行引入。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://zhangpeiyue.com/wp-content/uploads/2018/08/prop-types.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>具体使用，可看以下示例：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">var</span> name=<span class="hljs-string">&quot;老大&quot;</span><br><span class="hljs-keyword">var</span> age=<span class="hljs-number">18</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>    render() &#123;<br>        <span class="hljs-keyword">return</span> &lt;div&gt;<br>            &#123;<span class="hljs-keyword">this</span>.props.name&#125;今年&#123;<span class="hljs-keyword">this</span>.props.age&#125;岁了！<br>        &lt;/div&gt;;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//propTypes是组件类的静态属性</span><br><span class="hljs-type">MyComponent</span>.propTypes=&#123;<br>    <span class="hljs-comment">//将name设置为string类型</span><br>    name:<span class="hljs-type">PropTypes</span>.string,<br>    <span class="hljs-comment">//将age设置为number类型</span><br>    age:<span class="hljs-type">PropTypes</span>.number<br>&#125;;<br><span class="hljs-keyword">var</span> element = &lt;<span class="hljs-type">MyComponent</span> name=&#123;name&#125; age=&#123;age&#125; /&gt;;<br><span class="hljs-type">ReactDOM</span>.render(<br>    element,<br>    document.querySelector(<span class="hljs-string">&quot;#wrap&quot;</span>)<br>);<br></code></pre></td></tr></table></figure><p>以上示例当中的name与age不合法时，会弹出类型不符的警告！所以在项目开发中使用PropTypes进行对props的验证还是很有好处的！<br>更多验证器说明如下：</p><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">MyComponent.propTypes = &#123;<br>    // 可以声明 <span class="hljs-attribute">prop 为指定的 JS 基本数据类型，默认情况，这些数据是可选的</span><br><span class="hljs-attribute">   optionalArray</span>: React<span class="hljs-variable">.PropTypes</span><span class="hljs-variable">.array</span>,<br>    optionalBool: React<span class="hljs-variable">.PropTypes</span><span class="hljs-variable">.bool</span>,<br>    optionalFunc: React<span class="hljs-variable">.PropTypes</span><span class="hljs-variable">.func</span>,<br>    optionalNumber: React<span class="hljs-variable">.PropTypes</span><span class="hljs-variable">.number</span>,<br>    optionalObject: React<span class="hljs-variable">.PropTypes</span><span class="hljs-variable">.object</span>,<br>    optionalString: React<span class="hljs-variable">.PropTypes</span><span class="hljs-variable">.string</span>,<br> <br>    // 可以被渲染的对象 numbers, strings, elements 或 array<br>    optionalNode: React<span class="hljs-variable">.PropTypes</span><span class="hljs-variable">.node</span>,<br> <br>    //  React 元素<br>    optionalElement: React<span class="hljs-variable">.PropTypes</span><span class="hljs-variable">.element</span>,<br> <br>    // 用 JS 的 instanceof 操作符声明 prop 为类的实例。<br>    optionalMessage: React<span class="hljs-variable">.PropTypes</span><span class="hljs-variable">.instanceOf</span>(Message),<br> <br>    // 用 enum 来限制 prop 只接受指定的值。<br>    optionalEnum: React<span class="hljs-variable">.PropTypes</span><span class="hljs-variable">.oneOf</span>([&#x27;News&#x27;, &#x27;Photos&#x27;]),<br> <br>    // 可以是多个对象类型中的一个<br>    optionalUnion: React<span class="hljs-variable">.PropTypes</span><span class="hljs-variable">.oneOfType</span>([<br>      React<span class="hljs-variable">.PropTypes</span><span class="hljs-variable">.string</span>,<br>      React<span class="hljs-variable">.PropTypes</span><span class="hljs-variable">.number</span>,<br>      React<span class="hljs-variable">.PropTypes</span><span class="hljs-variable">.instanceOf</span>(Message)<br>    ]),<br> <br>    // 指定类型组成的数组<br>    optionalArrayOf: React<span class="hljs-variable">.PropTypes</span><span class="hljs-variable">.arrayOf</span>(React<span class="hljs-variable">.PropTypes</span><span class="hljs-variable">.number</span>),<br> <br>    // 指定类型的属性构成的对象<br>    optionalObjectOf: React<span class="hljs-variable">.PropTypes</span><span class="hljs-variable">.objectOf</span>(React<span class="hljs-variable">.PropTypes</span><span class="hljs-variable">.number</span>),<br> <br>    // 特定 shape 参数的对象<br>    optionalObjectWithShape: React<span class="hljs-variable">.PropTypes</span><span class="hljs-variable">.shape</span>(&#123;<br>      color: React<span class="hljs-variable">.PropTypes</span><span class="hljs-variable">.string</span>,<br>      fontSize: React<span class="hljs-variable">.PropTypes</span><span class="hljs-variable">.number</span><br>    &#125;),<br> <br>    // 任意类型加上 `isRequired` 来使 prop 不可空。<br>    requiredFunc: React<span class="hljs-variable">.PropTypes</span><span class="hljs-variable">.func</span><span class="hljs-variable">.isRequired</span>,<br> <br>    // 不可空的任意类型<br>    requiredAny: React<span class="hljs-variable">.PropTypes</span><span class="hljs-variable">.any</span><span class="hljs-variable">.isRequired</span>,<br> <br>    // 自定义验证器。如果验证失败需要返回一个 Error 对象。不要直接使用 `console<span class="hljs-variable">.warn</span>` 或抛异常，因为这样 `oneOfType` 会失效。<br>    customProp: function(props, propName, componentName) &#123;<br>      if (!/matchme/<span class="hljs-variable">.test</span>(props[propName])) &#123;<br>        return new Error(&#x27;Validation failed!&#x27;);<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="现在我们来总结下-props与state的区别："><a href="#现在我们来总结下-props与state的区别：" class="headerlink" title="现在我们来总结下,props与state的区别："></a>现在我们来总结下,props与state的区别：</h4><p>– props是指组件间传递的一种方式，props自然也可以传递state。由于React的数据流是自上而下的，所以是从父组件向子组件进行传递；另外组件内部的this.props属性是只读的不可修改！<br>– state是组件内部的状态（数据），不能够直接修改，必须要通过setState来改变值的状态，从而达到更新组件内部数据的作用。</p><h4 id="props和state是经常要结合使用的，父组件的state可以转化为props来为子组件进行传值。在这种情况下，子组件接收的props是只读的，想要改变值，只能通过父组件的state对其进行更改。"><a href="#props和state是经常要结合使用的，父组件的state可以转化为props来为子组件进行传值。在这种情况下，子组件接收的props是只读的，想要改变值，只能通过父组件的state对其进行更改。" class="headerlink" title="props和state是经常要结合使用的，父组件的state可以转化为props来为子组件进行传值。在这种情况下，子组件接收的props是只读的，想要改变值，只能通过父组件的state对其进行更改。"></a>props和state是经常要结合使用的，父组件的state可以转化为props来为子组件进行传值。在这种情况下，子组件接收的props是只读的，想要改变值，只能通过父组件的state对其进行更改。</h4>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>es6(1)</title>
    <link href="/2019/04/23/es6-1/"/>
    <url>/2019/04/23/es6-1/</url>
    
    <content type="html"><![CDATA[<h2 id="es6基础知识"><a href="#es6基础知识" class="headerlink" title="es6基础知识"></a>es6基础知识</h2><p>这两天在整理react知识点的时候，顺便对es6的基础知识也进行了一些整理，其实es6出来已经很久了，也不算是一个新的技术了，现在也已经很普及了，所以是时候将它掌握起来了。</p><h3 id="一，es6是什么以及为什么要学习它"><a href="#一，es6是什么以及为什么要学习它" class="headerlink" title="一，es6是什么以及为什么要学习它"></a>一，es6是什么以及为什么要学习它</h3><p>ECMAScript 6（以下简称ES6）是JavaScript语言的下一代标准，已经在2015年6月正式发布了。它的目标，是使得JavaScript语言可以用来编写复杂的大型应用程序，成为企业级开发语言。<br>标准的制定者有计划，以后每年发布一次标准，使用年份作为标准的版本。因为当前版本的ES6是在2015年发布的，所以又称ECMAScript 2015。也就是说，ES6就是ES2015，下一年应该会发布小幅修订的ES2016。<br>虽然现在的浏览器还不能支持es6，但是我们能通过babel语法转化器，将es6转化为能被大多数浏览器能够支持的es5。<br>流行的库基本都基于es6构建，React默认使用es6新语法开发，现在React16.0中</p><h3 id="二，环境准备，使用react官方推荐的脚手架create-react-app"><a href="#二，环境准备，使用react官方推荐的脚手架create-react-app" class="headerlink" title="二，环境准备，使用react官方推荐的脚手架create-react-app"></a>二，环境准备，使用react官方推荐的脚手架create-react-app</h3><ul><li>1 安装nodejs</li><li>2 npm install -g create-react-app 安装脚手架<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> -g create-react-app<br></code></pre></td></tr></table></figure></li><li>3 create-react-app es6-demo 创建react项目<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">cd</span> <span class="hljs-string">Desktop</span> // 进入桌面<br><span class="hljs-built_in">create-react-app</span> <span class="hljs-string">es6-demo</span> // 用脚手架生成<span class="hljs-string">es6-demo</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="三，es6里都有些什么"><a href="#三，es6里都有些什么" class="headerlink" title="三，es6里都有些什么"></a>三，es6里都有些什么</h3><ul><li><p>块级作用域，字符串，函数</p></li><li><p>对象扩展，解构</p></li><li><p>类，模块化<br>1，作用域：let与const<br>定义变量使用let代替var，块级作用域<br>Const定义不可修改的变量</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// let:块级作用域</span><br>&#123;<br><span class="hljs-keyword">var</span> a1 = <span class="hljs-string">&#x27;darrell1&#x27;</span>;<br>let a2 = <span class="hljs-string">&#x27;darrell2&#x27;</span><br>&#125;<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a1); <span class="hljs-comment">// darrell1</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a2); <span class="hljs-comment">// &#x27;a2&#x27; is not defined </span><br><br><span class="hljs-comment">// const:基本类型</span><br>const a3 = <span class="hljs-string">&#x27;darrell3&#x27;</span><br>a3 = <span class="hljs-string">&#x27;darrell4&#x27;</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a3); <span class="hljs-comment">// &quot;a3&quot; is read-only</span><br><br>const a = []; <span class="hljs-comment">// 如果是引用类型的话，往里面添加值是没问题的，但是改变指向后则会报错</span><br>a.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;apple&#x27;</span>);<br>a.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;egg&#x27;</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a); <span class="hljs-comment">// [&quot;apple&quot;, &quot;egg&quot;]</span><br></code></pre></td></tr></table></figure><p>  2，字符串：模板字符串<br>  使用反引号，直接写变量<br>  多行字符串<br>  告别+拼接字符串</p>  <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let name=<span class="hljs-string">&#x27;imooc&#x27;</span><br><span class="hljs-comment">// es5</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;hello &#x27;</span>+name+<span class="hljs-string">&#x27;! \n you are funny!&#x27;</span>)<br><span class="hljs-comment">// es6 after</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">`hello <span class="hljs-subst">$&#123;name&#125;</span>!</span><br><span class="hljs-string">you are funny!`</span>)  <span class="hljs-comment">// 换行不需要加\n,直接换行就行</span><br></code></pre></td></tr></table></figure><p>  3，函数扩展：ES6中函数的用法<br>  参数有默认值<br>  箭头函数<br>  展开运算符</p>  <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 带默认参数的箭头函数</span><br>let hello = <span class="hljs-function">(<span class="hljs-params">name=<span class="hljs-string">&#x27;world&#x27;</span></span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">`hello <span class="hljs-subst">$&#123;name&#125;</span>`</span>)<br>&#125;<br><span class="hljs-comment">// 直接返回值的箭头函数</span><br>let cal = <span class="hljs-function"><span class="hljs-params">num</span>=&gt;</span>num*<span class="hljs-number">2</span><br><span class="hljs-comment">// 多个参数</span><br>let cal1 = <span class="hljs-function">(<span class="hljs-params">num1, num2</span>)=&gt;</span>num1*num2<br><br>hello() <span class="hljs-comment">// hello world</span><br>hello(<span class="hljs-string">&#x27;darrell&#x27;</span>) <span class="hljs-comment">// hello darrell</span><br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(cal(<span class="hljs-number">5</span>)) <span class="hljs-comment">// 10</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(cal1(<span class="hljs-number">5</span>, <span class="hljs-number">6</span>)) <span class="hljs-comment">// 30</span><br><br>let arr = [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(cal1(...arr)) <span class="hljs-comment">// ...解构，输出 42</span><br></code></pre></td></tr></table></figure><p>  4，对象扩展：Object扩展<br>  Object.keys、values、entries<br>  对象方法简写，计算属性<br>  展开运算符（不是ES6标准，但是babel也支持）</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> name = <span class="hljs-string">&#x27;imooc&#x27;</span><br><span class="hljs-comment">// es5</span><br><span class="hljs-keyword">const</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: name,<br>    <span class="hljs-attr">site</span>:<span class="hljs-string">&#x27;imooc.com&#x27;</span>,<br>    <span class="hljs-attr">sayHello</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello world!&#x27;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj)<br>obj.<span class="hljs-title function_">sayHello</span>()<br><br><span class="hljs-comment">//es6:</span><br><span class="hljs-comment">//在对象里面添加跟变量名一样的属性址，并且属性的值就是变量的属性址。就可以直接简写成下面这样,函数也可以简写</span><br><span class="hljs-keyword">const</span> obj = &#123;<br>    name,<br>    <span class="hljs-attr">site</span>:<span class="hljs-string">&#x27;imooc.com&#x27;</span>,<br>    <span class="hljs-title function_">sayHello</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello world!&#x27;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj)<br>obj.<span class="hljs-title function_">sayHello</span>()<br></code></pre></td></tr></table></figure><p>  5，解构赋值，函数也可以多返回值<br>  数组结构<br>  对象解构</p>  <figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xl">const [<span class="hljs-keyword">name</span>, age] = [<span class="hljs-string">&#x27;imooc&#x27;</span>, <span class="hljs-string">&#x27;20&#x27;</span>]<br>const &#123;<span class="hljs-built_in">title</span>,job&#125; = &#123;<span class="hljs-built_in">title</span>:<span class="hljs-string">&#x27;React开发App&#x27;</span>, job:<span class="hljs-string">&#x27;IT&#x27;</span>&#125;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">name</span>,age) <span class="hljs-comment">// imooc,20</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">title</span>,job) <span class="hljs-comment">// React开发App, IT</span><br></code></pre></td></tr></table></figure><p>  6，类：提供class的语法糖<br>  是prototype的语法糖<br>  Extends继承<br>  Constructor构造函数</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyApp</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">age</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=<span class="hljs-string">&#x27;darrell&#x27;</span>  <br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age      <br>    &#125; <span class="hljs-comment">//用这个类实例化一个对象是，会最先执行这个构造器</span><br>    <span class="hljs-title function_">sayHello</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`hello <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>, I am <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.age&#125;</span> years old`</span>) <span class="hljs-comment">//模版字符串</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyApp</span>(<span class="hljs-number">18</span>)<br>app.<span class="hljs-title function_">sayHello</span>() <span class="hljs-comment">// 输出的为：hello darrell, I am 18 years old</span><br></code></pre></td></tr></table></figure><p>  7，新的数据结构：ES6中新出现的数据结构<br>  Set，元素不可重合<br>  Map<br>  Symbol</p>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> Set:不能有重复的内容<br>let desserts = new Set([<span class="hljs-string">&#x27;tomao&#x27;</span>,<span class="hljs-string">&#x27;peats&#x27;</span>,<span class="hljs-string">&#x27;egg&#x27;</span>]);<br><br>desserts.add(<span class="hljs-string">&#x27;toma&#x27;</span>); <br>console.log(desserts); <span class="hljs-regexp">//</span> [<span class="hljs-string">&#x27;tomao&#x27;</span>,<span class="hljs-string">&#x27;peats&#x27;</span>,<span class="hljs-string">&#x27;egg&#x27;</span>,<span class="hljs-string">&#x27;toma&#x27;</span>]<br>console.log(desserts.size); <span class="hljs-number">4</span><br>console.log(desserts.has(<span class="hljs-string">&#x27;tomao&#x27;</span>)); <span class="hljs-regexp">//</span> true<br>desserts.<span class="hljs-keyword">delete</span>(<span class="hljs-string">&#x27;toma&#x27;</span>); <br>console.log(desserts) <span class="hljs-regexp">//</span> [<span class="hljs-string">&#x27;tomao&#x27;</span>,<span class="hljs-string">&#x27;peats&#x27;</span>,<span class="hljs-string">&#x27;egg&#x27;</span>]<br>desserts.clear();  <span class="hljs-regexp">//</span> []<br></code></pre></td></tr></table></figure><p>  8，模块化：ES6中自带了模块化机制，告别seajs和require.js<br>  Import,import{}<br>  Emport,Export default<br>  Node现在还不支持，还需要require来加载文件</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// module1.js</span><br><span class="hljs-keyword">let</span> fruit = <span class="hljs-string">&#x27;apple&#x27;</span>;<br><span class="hljs-keyword">let</span> dessert = <span class="hljs-string">&#x27;cake&#x27;</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-title function_">dinner</span> = (<span class="hljs-params">fruit,dessert</span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`今天的晚餐是<span class="hljs-subst">$&#123;fruit&#125;</span>和<span class="hljs-subst">$&#123;dessert&#125;</span>`</span>);<br>&#125;<br><span class="hljs-keyword">export</span> &#123;fruit,dessert&#125;;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> dinner; <span class="hljs-comment">// 导出默认的函数</span><br><br><span class="hljs-comment">//module2.js</span><br><span class="hljs-keyword">import</span> dinner <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./module1.js&#x27;</span>; <span class="hljs-comment">//这个是拿到module1.js默认导出的dinner函数</span><br><span class="hljs-title function_">dinner</span>(<span class="hljs-string">&#x27;apple&#x27;</span>,<span class="hljs-string">&#x27;egg&#x27;</span>); <span class="hljs-comment">// 今天的晚餐是apple和egg</span><br><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> chef <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./module1.js&#x27;</span>; <span class="hljs-comment">// 将module1种所有的export都导出重命名为chef</span><br><br>chef.<span class="hljs-title function_">default</span>(<span class="hljs-string">&#x27;apple&#x27;</span>,<span class="hljs-string">&#x27;egg&#x27;</span>);<span class="hljs-comment">// 今天的晚餐是apple和egg,默认导出的是放在chef的defalut里</span><br>chef.<span class="hljs-title function_">default</span>(chef.<span class="hljs-property">fruit</span>,chef.<span class="hljs-property">dessert</span>); <span class="hljs-comment">// 今天的晚餐是apple和cake</span><br></code></pre></td></tr></table></figure><p>  9，还有一些特性，虽然不在ES6的范围，其他的特性，但是也被babel支持，普遍被大家接受和使用(需要安装插件)。不过这些对于初学者来说，这些暂时还不需要全部掌握。<br>  Async await</p><p>  处理异步的方法，非常的简单优雅,具体大家可以参考阮一峰老师的这篇文章，async 函数的含义和用法,</p>  <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">Promise</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">(resolve)</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(function()&#123;<br>    resolve()<br>    &#125;, <span class="hljs-number">3000</span>);<br>&#125;).<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    console.log(<span class="hljs-string">&#x27;promise 成功&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>  上面是一个简单的例子，我new了一个promise对象，让他在三秒之后可以输出promise 成功，具体的操作大家可以查看，具体的Promise大家可以参考阮一峰老师的ECMAScript 6 入门这本书中对于Promise的讲解，讲的很好。<br>  其实promise更多的是用来获取数据，比如我们在react项目中，会通过fetch发送异步请求，其实fetch返回的就是一个promise对象，所以我们一直.then()</p><p>  迭代器(Iterators)和生成器(Generators)</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 自己实现的一个简单版的迭代器</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">chef</span>(<span class="hljs-params">foods</span>) &#123;<br>    <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-title function_">next</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-keyword">let</span> done = (i &gt;= foods.<span class="hljs-property">length</span>);<br>            <span class="hljs-keyword">let</span> value = !done ? foods[i++] : <span class="hljs-literal">undefined</span>;<br><br>            <span class="hljs-keyword">return</span> &#123;<br>                <span class="hljs-attr">value</span>: value,<br>                <span class="hljs-attr">done</span>:done<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> anghao = <span class="hljs-title function_">chef</span>([<span class="hljs-string">&#x27;tomato&#x27;</span>,<span class="hljs-string">&#x27;egg&#x27;</span>]);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(anghao.<span class="hljs-title function_">next</span>()); <span class="hljs-comment">// &#123;value: &quot;tomato&quot;, done: false&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(anghao.<span class="hljs-title function_">next</span>()); <span class="hljs-comment">// &#123;value: &quot;egg&quot;, done: false&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(anghao.<span class="hljs-title function_">next</span>()); <span class="hljs-comment">// &#123;value: undefined, done: true&#125;</span><br><br><span class="hljs-comment">//es6 的 Generators</span><br><span class="hljs-keyword">function</span>* <span class="hljs-title function_">chef</span>(<span class="hljs-params">foods</span>) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span> ;i&lt; foods.<span class="hljs-property">length</span>;i++) &#123;<br>    <span class="hljs-keyword">yield</span> foods[i]<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//第二种</span><br><span class="hljs-keyword">let</span> wanghao = <span class="hljs-title function_">chef</span>([<span class="hljs-string">&#x27;tomato&#x27;</span>,<span class="hljs-string">&#x27;egg&#x27;</span>]);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(wanghao.<span class="hljs-title function_">next</span>()); <span class="hljs-comment">// &#123;value: &quot;tomato&quot;, done: false&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(wanghao.<span class="hljs-title function_">next</span>()); <span class="hljs-comment">// &#123;value: &quot;egg&quot;, done: false&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(wanghao.<span class="hljs-title function_">next</span>()); <span class="hljs-comment">// &#123;value: undefined, done: true&#125;</span><br></code></pre></td></tr></table></figure><p>  以上是简单的迭代器与生成器的例子，笔者最近在学习阿里的dva的redux框架，其中他处理异步数据流的时候使用了redux-saga,里面有用到生成器。不过对于初学者来说，这些暂时还不需要掌握。</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>es6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git笔记总结篇</title>
    <link href="/2019/04/22/git-summary/"/>
    <url>/2019/04/22/git-summary/</url>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><hr><ul><li>在 Windows 上安装 Git 同样轻松，有个叫做 msysGit 的项目提供了安装包：</li></ul><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>http://msysgit.github.io/<br></code></pre></td></tr></table></figure><ul><li>完成安装之后，就可以使用命令行的 git 工具（已经自带了 ssh 客户端）了，另外还有一个图形界面的 Git 项目管理工具。</li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><hr><ul><li>首先是配置帐号信息</li></ul><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>git config -e [--global] # 编辑Git配置文件<br><span class="hljs-symbol">2 </span>git config --global user.<span class="hljs-keyword">name</span> yanhaijing<br><span class="hljs-symbol">3 </span>git config --global user.email yanhaijing@yeah.net<br><span class="hljs-symbol">4 </span>git config --<span class="hljs-keyword">list</span> #查看配置的信息<br><span class="hljs-symbol">5 </span>git help config #获取帮助信息<br></code></pre></td></tr></table></figure><ul><li>配置自动换行（自动转换坑太大）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">1git config --<span class="hljs-keyword">global</span> core.autocrlf <span class="hljs-built_in">input</span> <span class="hljs-comment">#提交到git是自动将换行符转换为lf</span><br></code></pre></td></tr></table></figure><ul><li>配置密钥</li></ul><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>ssh-keygen -t rsa -C yanhaijing@yeah.net #生成密钥<br><span class="hljs-symbol">2 </span>ssh -T git@github.<span class="hljs-keyword">com</span> #测试是否成功<br></code></pre></td></tr></table></figure><ul><li>配置别名，git的命令没有自动完成功能，有点坑哈，别名派上了用场</li></ul><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>git config --global alias.st status #git st<br><span class="hljs-symbol">2 </span>git config --global alias.co checkout #git co<br><span class="hljs-symbol">3 </span>git config --global alias.br branch #git br<br><span class="hljs-symbol">4 </span>git config --global alias.ci commit #git ci<br></code></pre></td></tr></table></figure><h2 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h2><hr><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">git init <span class="hljs-meta">#初始化</span><br>git status <span class="hljs-meta">#获取状态</span><br>git <span class="hljs-keyword">add</span> [file1] [file2] ... <span class="hljs-meta">#.或*代表全部添加</span><br>git commit -m <span class="hljs-string">&quot;message&quot;</span> <span class="hljs-meta">#此处注意乱码</span><br>git remote <span class="hljs-keyword">add</span> origin git@github.com:yanhaijing/test.git <span class="hljs-meta">#添加源</span><br>git <span class="hljs-keyword">push</span> -u origin master <span class="hljs-meta">#push同事设置默认跟踪分支</span><br></code></pre></td></tr></table></figure><h2 id="从现有仓库克隆"><a href="#从现有仓库克隆" class="headerlink" title="从现有仓库克隆"></a>从现有仓库克隆</h2><hr><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone git:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/yanhaijing/</span>data.js.git    <br>git clone git:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/schacon/g</span>rit.git mypro<span class="hljs-comment">#克隆到自定义文件夹</span><br></code></pre></td></tr></table></figure><h2 id="本地"><a href="#本地" class="headerlink" title="本地"></a>本地</h2><hr><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs perl">git add * <span class="hljs-comment"># 跟踪新文件</span><br>git add -u [path] <span class="hljs-comment"># 添加[指定路径下]已跟踪文件</span><br><br>rm *&amp;git rm * <span class="hljs-comment"># 移除文件</span><br>git rm -f * <span class="hljs-comment"># 移除文件</span><br>git rm --cached * <span class="hljs-comment"># 停止追踪指定文件，但该文件会保留在工作区</span><br>git mv file_from file_to <span class="hljs-comment"># 重命名跟踪文件</span><br><br>git <span class="hljs-keyword">log</span> <span class="hljs-comment"># 查看提交记录</span><br><br>git commit <span class="hljs-comment"># 提交更新    </span><br>git commit [file1] [file2] ... <span class="hljs-comment"># 提交指定文件    </span><br>git commit -m <span class="hljs-string">&#x27;message&#x27;</span><br>git commit -a <span class="hljs-comment"># 跳过使用暂存区域，把所有已经跟踪过的文件暂存起来一并提交</span><br>git commit --amend<span class="hljs-comment">#修改最后一次提交</span><br>git commit -v <span class="hljs-comment"># 提交时显示所有diff信息</span><br><br>git <span class="hljs-keyword">reset</span> HEAD *<span class="hljs-comment">#取消已经暂存的文件</span><br>git <span class="hljs-keyword">reset</span> --mixed HEAD *<span class="hljs-comment">#同上</span><br>git <span class="hljs-keyword">reset</span> --soft HEAD *<span class="hljs-comment">#重置到指定状态，不会修改索引区和工作树</span><br>git <span class="hljs-keyword">reset</span> --hard HEAD *<span class="hljs-comment">#重置到指定状态，会修改索引区和工作树</span><br>git <span class="hljs-keyword">reset</span> -- files<span class="hljs-comment">#重置index区文件</span><br><br>git revert HEAD <span class="hljs-comment">#撤销前一次操作</span><br>git revert HEAD~ <span class="hljs-comment">#撤销前前一次操作</span><br>git revert commit <span class="hljs-comment">## 撤销指定操作</span><br><br>git checkout -- file<span class="hljs-comment">#取消对文件的修改（从暂存区——覆盖worktree file）</span><br>git checkout branch|tag|commit -- file_name<span class="hljs-comment">#从仓库取出file覆盖当前分支</span><br>git checkout -- .<span class="hljs-comment">#从暂存区取出文件覆盖工作区</span><br><br>git diff file <span class="hljs-comment">#查看指定文件的差异</span><br>git diff --<span class="hljs-keyword">stat</span> <span class="hljs-comment">#查看简单的diff结果</span><br>git diff <span class="hljs-comment">#比较Worktree和Index之间的差异</span><br>git diff --cached <span class="hljs-comment">#比较Index和HEAD之间的差异</span><br>git diff HEAD <span class="hljs-comment">#比较Worktree和HEAD之间的差异</span><br>git diff branch <span class="hljs-comment">#比较Worktree和branch之间的差异</span><br>git diff branch1 branch2 <span class="hljs-comment">#比较两次分支之间的差异</span><br>git diff commit commit <span class="hljs-comment">#比较两次提交之间的差异</span><br><br>git <span class="hljs-keyword">log</span> <span class="hljs-comment">#查看最近的提交日志</span><br>git <span class="hljs-keyword">log</span> --pretty=oneline <span class="hljs-comment">#单行显示提交日志</span><br>git <span class="hljs-keyword">log</span> --graph <span class="hljs-comment"># 图形化显示</span><br>git <span class="hljs-keyword">log</span> --abbrev-commit <span class="hljs-comment"># 显示log id的缩写</span><br>git <span class="hljs-keyword">log</span> -num <span class="hljs-comment">#显示第几条log（倒数）</span><br>git <span class="hljs-keyword">log</span> --<span class="hljs-keyword">stat</span> <span class="hljs-comment"># 显示commit历史，以及每次commit发生变更的文件</span><br>git <span class="hljs-keyword">log</span> --follow [file] <span class="hljs-comment"># 显示某个文件的版本历史，包括文件改名</span><br>git <span class="hljs-keyword">log</span> -p [file] <span class="hljs-comment"># 显示指定文件相关的每一次diff</span><br><br>git stash <span class="hljs-comment">#将工作区现场（已跟踪文件）储藏起来，等以后恢复后继续工作。</span><br>git stash list <span class="hljs-comment">#查看保存的工作现场</span><br>git stash apply <span class="hljs-comment">#恢复工作现场</span><br>git stash drop <span class="hljs-comment">#删除stash内容</span><br>git stash <span class="hljs-keyword">pop</span> <span class="hljs-comment">#恢复的同时直接删除stash内容</span><br>git stash apply stash@&#123;0&#125; <span class="hljs-comment">#恢复指定的工作现场，当你保存了不只一份工作现场时。</span><br></code></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><hr><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">git <span class="hljs-keyword">branch#列出本地分支</span><br><span class="hljs-keyword"></span>git <span class="hljs-keyword">branch </span>-r<span class="hljs-comment">#列出远端分支</span><br>git <span class="hljs-keyword">branch </span>-a<span class="hljs-comment">#列出所有分支</span><br>git <span class="hljs-keyword">branch </span>-v<span class="hljs-comment">#查看各个分支最后一个提交对象的信息</span><br>git <span class="hljs-keyword">branch </span>--merge<span class="hljs-comment">#查看已经合并到当前分支的分支</span><br>git <span class="hljs-keyword">branch </span>--no-merge<span class="hljs-comment">#查看为合并到当前分支的分支</span><br>git <span class="hljs-keyword">branch </span>test<span class="hljs-comment">#新建test分支</span><br>git <span class="hljs-keyword">branch </span><span class="hljs-keyword">branch </span>[<span class="hljs-keyword">branch|commit|tag] </span><span class="hljs-comment"># 从指定位置出新建分支</span><br>git <span class="hljs-keyword">branch </span>--track <span class="hljs-keyword">branch </span>remote-<span class="hljs-keyword">branch </span><span class="hljs-comment"># 新建一个分支，与指定的远程分支建立追踪关系</span><br>git <span class="hljs-keyword">branch </span>-m old new <span class="hljs-comment">#重命名分支</span><br>git <span class="hljs-keyword">branch </span>-d test<span class="hljs-comment">#删除test分支</span><br>git <span class="hljs-keyword">branch </span>-D test<span class="hljs-comment">#强制删除test分支</span><br>git <span class="hljs-keyword">branch </span>--set-upstream dev <span class="hljs-keyword">origin/dev </span><span class="hljs-comment">#将本地dev分支与远程dev分支之间建立链接</span><br><br>git checkout test<span class="hljs-comment">#切换到test分支</span><br>git checkout -<span class="hljs-keyword">b </span>test<span class="hljs-comment">#新建+切换到test分支</span><br>git checkout -<span class="hljs-keyword">b </span>test dev<span class="hljs-comment">#基于dev新建test分支，并切换</span><br><br>git merge test<span class="hljs-comment">#将test分支合并到当前分支</span><br>git merge --squash test <span class="hljs-comment">## 合并压缩，将test上的commit压缩为一条</span><br><br>git cherry-pick commit <span class="hljs-comment">#拣选合并，将commit合并到当前分支</span><br>git cherry-pick -n commit <span class="hljs-comment">#拣选多个提交，合并完后可以继续拣选下一个提交</span><br><br>git rebase master<span class="hljs-comment">#将master分之上超前的提交，变基到当前分支</span><br>git rebase --onto master <span class="hljs-number">169</span><span class="hljs-built_in">a6</span> <span class="hljs-comment">#限制回滚范围，rebase当前分支从169a6以后的提交</span><br>git rebase --interactive <span class="hljs-comment">#交互模式    </span><br>git rebase --continue<span class="hljs-comment"># 处理完冲突继续合并    </span><br>git rebase --skip<span class="hljs-comment"># 跳过    </span><br>git rebase --abort<span class="hljs-comment"># 取消合并</span><br></code></pre></td></tr></table></figure><h2 id="远端"><a href="#远端" class="headerlink" title="远端"></a>远端</h2><hr><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">git fetch <span class="hljs-keyword">origin </span>remotebranch[:localbranch]<span class="hljs-comment"># 从远端拉去分支[到本地指定分支]</span><br><br>git merge <span class="hljs-keyword">origin/branch#合并远端上指定分支</span><br><span class="hljs-keyword"></span><br>git pull <span class="hljs-keyword">origin </span>remotebranch:localbranch<span class="hljs-comment"># 拉去远端分支到本地分支</span><br><br>git push <span class="hljs-keyword">origin </span><span class="hljs-keyword">branch#将当前分支，推送到远端上指定分支</span><br><span class="hljs-keyword"></span>git push <span class="hljs-keyword">origin </span>localbranch:remotebranch<span class="hljs-comment">#推送本地指定分支，到远端上指定分支</span><br>git push <span class="hljs-keyword">origin </span>:remotebranch <span class="hljs-comment"># 删除远端指定分支</span><br>git push <span class="hljs-keyword">origin </span>remotebranch --delete <span class="hljs-comment"># 删除远程分支</span><br>git <span class="hljs-keyword">branch </span>-dr <span class="hljs-keyword">branch </span><span class="hljs-comment"># 删除本地和远程分支</span><br>git checkout -<span class="hljs-keyword">b </span>[--track] test <span class="hljs-keyword">origin/dev#基于远端dev分支，新建本地test分支[同时设置跟踪]</span><br></code></pre></td></tr></table></figure><h2 id="源"><a href="#源" class="headerlink" title="源"></a>源</h2><hr><blockquote><ul><li>git是一个分布式代码管理工具，所以可以支持多个仓库，在git里，服务器上的仓库在本地称之为remote。</li><li>个人开发时，多源用的可能不多，但多源其实非常有用。</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add origin1 git@github.com:yanhaijing/data.js.git<br><br>git remote<span class="hljs-comment">#显示全部源</span><br>git remote -v<span class="hljs-comment">#显示全部源+详细信息</span><br><br>git remote rename origin1 origin2<span class="hljs-comment">#重命名</span><br><br>git remote <span class="hljs-built_in">rm</span> origin<span class="hljs-comment">#删除</span><br><br>git remote show origin<span class="hljs-comment">#查看指定源的全部信息</span><br></code></pre></td></tr></table></figure><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><hr><blockquote><ul><li>当开发到一定阶段时，给程序打标签是非常棒的功能。</li></ul></blockquote><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">tag</span><span class="hljs-comment">#列出现有标签    </span><br><br>git <span class="hljs-keyword">tag</span> <span class="hljs-title">v0</span>.<span class="hljs-number">1</span> [branch|commit] <span class="hljs-comment"># [从指定位置]新建标签</span><br>git <span class="hljs-keyword">tag</span> <span class="hljs-title">-a</span> v0.<span class="hljs-number">1</span> -m &#x27;my <span class="hljs-keyword">version</span> <span class="hljs-number">1.4</span>&#x27;<span class="hljs-comment">#新建带注释标签</span><br><br>git checkout tagname<span class="hljs-comment">#切换到标签</span><br><br>git push origin v1.<span class="hljs-number">5</span><span class="hljs-comment">#推送分支到源上</span><br>git push origin --tags<span class="hljs-comment">#一次性推送所有分支</span><br><br>git <span class="hljs-keyword">tag</span> <span class="hljs-title">-d</span> v0.<span class="hljs-number">1</span><span class="hljs-comment">#删除标签</span><br>git push origin :refs/tags/v0.<span class="hljs-number">1</span><span class="hljs-comment">#删除远程标签</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>git summary</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
